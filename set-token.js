// –°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞

console.log('üé´ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω...');

const correctToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImZ1bGxfbmFtZSI6IkphaG9uZ2lyIiwidXNlcl9pZCI6Ijk5IiwiZXhwIjoxNzYxNzI1MjUwfQ.nA-NmjABdTGTNBBvjfHCsOf95Ogz-M2sbr0-2Bt0ajw';

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
localStorage.setItem('auth_token', correctToken);

console.log('‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω...');

// –ü–∞—Ä—Å–∏–º JWT –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function parseJWT(token) {
    try {
        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
        return JSON.parse(jsonPayload);
    } catch (e) {
        return null;
    }
}

const payload = parseJWT(correctToken);
console.log('üìã Token payload:', payload);

if (payload) {
    const expDate = new Date(payload.exp * 1000);
    console.log('‚è∞ Token expires:', expDate.toLocaleString());
    console.log('üë§ User:', payload.sub, '- ID:', payload.user_id);
    
    if (expDate > new Date()) {
        console.log('‚úÖ Token is valid');
    } else {
        console.log('‚ùå Token is expired');
    }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...');

const wsUrl = `wss://socket.eldor.kz/api/ws?token=${correctToken}`;
const ws = new WebSocket(wsUrl);

const timeout = setTimeout(() => {
    console.log('‚è∞ WebSocket timeout');
    ws.close();
}, 15000);

ws.onopen = function() {
    console.log('üéâ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    clearTimeout(timeout);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥
    ws.send(JSON.stringify({
        type: 'ping',
        timestamp: new Date().toISOString()
    }));
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => ws.close(), 5000);
};

ws.onmessage = function(event) {
    console.log('üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);
};

ws.onerror = function(error) {
    console.log('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
    clearTimeout(timeout);
};

ws.onclose = function(event) {
    console.log('üîö WebSocket –∑–∞–∫—Ä—ã—Ç:', event.code, event.reason);
    clearTimeout(timeout);
    
    if (event.code === 1000) {
        console.log('‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ - WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } else {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –∫–æ–¥:', event.code);
    }
};

console.log('‚è≥ –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket...');