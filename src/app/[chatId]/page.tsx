// src/app/[chatId]/page.tsx
"use client";
import { useCallback, useEffect, useMemo, useRef, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { TooltipProvider } from "@/components/ui/tooltip";
import type { Chat, Message, ReplyMessage } from "@/components/chat/types";
import { Sidebar } from "@/components/chat/Sidebar";
import { MessageBubble } from "@/components/chat/MessageBubble";
import { Composer } from "@/components/chat/Composer";
import { useWebSocket } from "@/providers/WebSocketProvider";
import { MobileSidebar } from "@/components/chat/MobileSidebar";
import { Menu, MessageCircleMore, MoreVertical, RefreshCw } from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { FEATURES } from "@/config/features";
import { apiConfig } from "@/lib/api-config";
import { tokenStorage } from "@/lib/token-storage";

export default function ChatPage() {
  const router = useRouter();
  const params = useParams();

  // üîπ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ chatId
  const rawChatId = params?.chatId
    ? Array.isArray(params.chatId)
      ? params.chatId[0]
      : params.chatId
    : null;

  const chatId = rawChatId ? decodeURIComponent(rawChatId) : null;

  if (!chatId) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-center">
          <div className="text-lg font-semibold mb-2">–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
          <p className="text-muted-foreground mb-4">
            –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
          </p>
          <Button onClick={() => router.push("/")}>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤
          </Button>
        </div>
      </div>
    );
  }

  const [hiddenPhones, setHiddenPhones] = useState<string[]>([]);
  const [query, setQuery] = useState("");
  const [chats, setChats] = useState<Chat[]>([]);
  const [messages, setMessages] = useState<Message[]>([]);
  const [loadingChats, setLoadingChats] = useState(true);
  const [loadingMessages, setLoadingMessages] = useState(true);
  const [isSwitchingChat, setIsSwitchingChat] = useState(false);
  const [draft, setDraft] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [isPolling, setIsPolling] = useState(false);
  const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false);
  const bottomRef = useRef<HTMLDivElement | null>(null);
  const scrollContainerRef = useRef<HTMLDivElement | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  // üîπ WebSocket —Ö—É–∫–∏ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó –Ω–∞–≤–µ—Ä—Ö—É
  const { isConnected, connectionState, sendMessage, onMessage, offMessage, reconnect } = useWebSocket();
  const [messageReplies, setMessageReplies] = useState<
    Map<string, ReplyMessage>
  >(new Map());
  // üîπ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç
  const isTempChat = !!chatId?.startsWith("temp:");
  const tempPhone = isTempChat ? chatId.replace("temp:", "") : null;

  const [replyingTo, setReplyingTo] = useState<ReplyMessage | null>(null);
  const handleCancelReply = () => {
    setReplyingTo(null);
  };

  // üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const handleReplyToMessage = (message: Message) => {
    console.log("üîπ REPLY: Setting reply to message:", message);
    console.log("üîπ REPLY: Message details:", {
      id: message.id,
      author: message.author,
      text: message.text,
      hasMedia: !!message.media
    });
    
    const replyData = {
      id: message.id,
      author: message.author,
      text: message.text,
      media: message.media
        ? {
            type: message.media.type,
            name: message.media.name,
          }
        : undefined,
    };
    
    console.log("üîπ REPLY: Setting replyingTo to:", replyData);
    setReplyingTo(replyData);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
    setTimeout(() => {
      console.log("üîπ REPLY: State after 100ms:", replyingTo);
    }, 100);
  };

  // –í —Ä–µ–Ω–¥–µ—Ä–µ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É:
  console.log("üîπ RENDER: Current replyingTo state:", replyingTo);

  // üóëÔ∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const handleDeleteMessage = async (messageId: string, remote: boolean = false) => {
    if (!chatId) {
      console.log("Cannot delete: no chatId");
      return;
    }

    console.log("=== DELETE MESSAGE ===");
    console.log("Message ID:", messageId);
    console.log("Chat ID:", chatId);
    console.log("Remote delete:", remote);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ tokenStorage
      console.log("üîç Getting auth token for message deletion...");
      const authToken = tokenStorage.getToken();
      
      if (!authToken) {
        console.error("‚ùå No auth token found for message deletion");
        alert("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      console.log("üîë Token found for message deletion:", authToken.substring(0, 10) + "...");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      const messageToDelete = messages.find(m => m.id === messageId);
      if (!messageToDelete) {
        console.error("‚ùå Message not found in current messages");
        alert("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        return;
      }

      console.log("üíæ Saved message for potential rollback:", messageToDelete.id);

      const deleteUrl = `/api/whatsapp/chats/${encodeURIComponent(chatId)}/messages/${encodeURIComponent(messageId)}`;
      const params = new URLSearchParams();
      
      if (remote) {
        params.set('remote', 'true');
      }

      const finalUrl = params.toString() ? `${deleteUrl}?${params}` : deleteUrl;

      console.log("Sending DELETE request to:", finalUrl);

      const response = await fetch(finalUrl, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json',
        },
      });

      console.log("üì° Message delete API Response status:", response.status);

      const responseData = await response.json().catch(() => ({}));

      if (response.ok) {
        console.log("‚úÖ Message deleted successfully:", responseData);
        
        // –¢–û–õ–¨–ö–û –¢–ï–ü–ï–†–¨ —É–¥–∞–ª—è–µ–º –∏–∑ UI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ API –æ—Ç–≤–µ—Ç–∞
        setMessages(prev => prev.filter(m => m.id !== messageId));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç—ã —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
          loadChats(true);
        }, 500);
        
      } else {
        console.error("‚ùå Failed to delete message:", response.status, responseData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        if (response.status === 400 || response.status === 502) {
          // –í–æ–∑–º–æ–∂–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ - –ø—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ
          console.log("üîç Message might be already deleted, refreshing messages...");
          
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          if (chatId) {
            loadMessages(chatId, true);
          }
          
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
          alert("–°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ. –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π...");
        } else {
          alert(
            responseData.error || 
            `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (${response.status})`
          );
        }
      }

    } catch (error) {
      console.error("Delete message error:", error);
      
      alert(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + 
        (error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
      );

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (chatId) {
        loadMessages(chatId, true);
      }
    }
  };

  // üóëÔ∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
  const handleDeleteChat = async (chatIdToDelete: string) => {
    console.log("=== DELETE CHAT ===");
    console.log("Chat ID to delete:", chatIdToDelete);

    try {
      console.log("üîç Getting auth token...");
      const authToken = tokenStorage.getToken();
      
      if (!authToken) {
        console.error("‚ùå No auth token found");
        // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –∫–ª—é—á–∏ –≤ localStorage –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log("üîç Checking all localStorage keys:");
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key && (key.includes('token') || key.includes('auth'))) {
            console.log(`  - ${key}: ${localStorage.getItem(key)?.substring(0, 20)}...`);
          }
        }
        throw new Error("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
      }

      console.log("üîë Token found:", authToken.substring(0, 10) + "...");

      const response = await fetch(`/api/whatsapp/chats/${encodeURIComponent(chatIdToDelete)}`, {
        method: "DELETE",
        headers: {
          "Authorization": `Bearer ${authToken}`,
          "Content-Type": "application/json",
        },
      });

      console.log("üì° API Response status:", response.status);

      if (response.ok) {
        console.log("‚úÖ Chat deleted successfully");
        
        // –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setChats(prevChats => prevChats.filter(chat => chat.id !== chatIdToDelete));
        
        // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        if (chatId === chatIdToDelete) {
          router.push("/");
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        setTimeout(() => {
          loadChats(true);
        }, 500);
        
      } else {
        const responseData = await response.json();
        console.error("‚ùå Failed to delete chat:", response.status, responseData);
        
        alert(
          responseData.error || 
          `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç (${response.status})`
        );
      }

    } catch (error) {
      console.error("Delete chat error:", error);
      
      alert(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: " + 
        (error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
      );
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
  const isNearBottom = () => {
    const el = scrollContainerRef.current;
    if (!el) return true;
    return el.scrollHeight - el.scrollTop - el.clientHeight < 120;
  };

  const fmtTime = (ts: number) => {
    try {
      return new Date(ts).toLocaleTimeString("ru-RU", {
        hour: "2-digit",
        minute: "2-digit",
      });
    } catch {
      return "00:00";
    }
  };

  const normalizePhone = (raw: string) => {
    let p = raw.trim().replace(/\D/g, "");

    if (p.length === 11) {
      return p;
    }

    if (p.length === 10) {
      return "7" + p;
    }

    if (p.length < 10) {
      console.error("Phone number too short:", p);
      return p;
    }

    if (p.length > 11) {
      console.warn("Phone number too long, trimming:", p);
      return p.slice(0, 11);
    }

    return p;
  };

  // ‚úÖ loadChats —Å useCallback
  const loadChats = useCallback(async (silent = false) => {
    if (!silent) setLoadingChats(true);
    setError(null);
    try {
      const res = await fetch("/api/whatsapp/chats", {
        cache: "no-store",
        headers: {
          "Cache-Control": "no-cache",
          "Authorization": `Bearer ${apiConfig.getAccessToken()}`,
          "Content-Type": "application/json",
        },
      });

      let data;
      if (!res.ok) {
        console.warn("Chats API returned error:", res.status);
        data = []; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      } else {
        data = await res.json();
      }

      const items: any[] = Array.isArray(data) ? data : [];

      const mapped: Chat[] = items.map((raw: any, i: number) => {
        const rawId = raw?.chat_id || raw?.id;
        const id = rawId ? String(rawId) : `temp-${i}`;
        let phone = raw?.phone || raw?.id || raw?.chat_id || "";
        phone = String(phone).replace("@c.us", "");
        const name = phone || `–ß–∞—Ç ${id}`;
        const ts =
          typeof raw?.updated_at === "number"
            ? raw.updated_at * 1000
            : raw?.updated_at
            ? Date.parse(raw.updated_at)
            : typeof raw?.timestamp === "number"
            ? raw.timestamp * 1000
            : raw?.timestamp
            ? Date.parse(raw.timestamp)
            : Date.now();
        const last = raw?.last_message || raw?.text || "";

        return {
          id,
          chat_id: raw?.chat_id || id,
          is_group: raw?.is_group || false,
          name,
          phone,
          lastMessage: last,
          time: fmtTime(ts),
          unread: raw?.unread_count || 0,
          avatarFallback: name?.slice(0, 2).toUpperCase() || "?",
          avatarUrl: `https://api.dicebear.com/9.x/initials/svg?seed=${encodeURIComponent(
            name
          )}`,
          updatedAt: ts,
        };
      });

      mapped.sort((a, b) => (b.updatedAt ?? 0) - (a.updatedAt ?? 0));
      setChats(mapped);
    } catch (e: any) {
      console.error("Failed to load chats:", e);
      setChats([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (!silent) {
        setError(e?.message ?? "Failed to load chats");
      }
    } finally {
      if (!silent) setLoadingChats(false);
    }
  }, []);

 const loadMessages = useCallback(
  async (currentChatId: string, silent = false) => {
    if (!currentChatId) {
      if (!silent) setLoadingMessages(false);
      return;
    }

    const decodedChatId = decodeURIComponent(currentChatId);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    if (decodedChatId.startsWith("temp:")) {
      setMessages([]);
      if (!silent) setLoadingMessages(false);
      return;
    }

    if (!silent) setLoadingMessages(true);

    try {
      console.log(`Loading messages for chat: ${decodedChatId}`);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ tokenStorage
      const authToken = tokenStorage.getToken();
      
      const headers: Record<string, string> = {
        "Cache-Control": "no-cache",
        "Content-Type": "application/json",
      };
      
      if (authToken) {
        headers["Authorization"] = `Bearer ${authToken}`;
      }

      const res = await fetch(
        `/api/whatsapp/chats/${encodeURIComponent(decodedChatId)}/messages`,
        {
          cache: "no-store",
          headers,
        }
      );

      if (!res.ok) {
        console.warn(`Messages API error: ${res.status} ${res.statusText}`);
        if (res.status === 404) {
          setMessages([]);
          return;
        }
        try {
          const errorData = await res.json();
          throw new Error(errorData?.error || `HTTP ${res.status}`);
        } catch {
          throw new Error(`Failed to load messages: ${res.status}`);
        }
      }

      const data = await res.json();
      console.log("Messages API response:", data);

      let messagesArray: any[] = [];

      if (Array.isArray(data)) {
        messagesArray = data;
      } else if (data && Array.isArray(data.items)) {
        messagesArray = data.items;
      } else if (data && typeof data === "object") {
        messagesArray = Object.values(data).filter(Array.isArray).flat();
      }

      console.log(`Processing ${messagesArray.length} messages`);

      const seenIds = new Set<string>();
      const mapped: Message[] = [];

      messagesArray.forEach((msg: any, index: number) => {
        try {
          const baseId =
            msg.id_message ||
            msg.id ||
            msg.message_ref ||
            msg._id ||
            `msg-${index}-${Date.now()}`;

          if (seenIds.has(baseId)) {
            console.log(`Skipping duplicate message: ${baseId}`);
            return;
          }
          seenIds.add(baseId);

          const isOutgoing = Boolean(
            msg.direction === "out" ||
              msg.sender?.id === "me" ||
              msg.fromMe ||
              msg.raw?.typeWebhook === "outgoingAPIMessageReceived"
          );

          let text = msg.text || "";
          if (!text && msg.messageData) {
            text =
              msg.messageData?.textMessageData?.textMessage ||
              msg.messageData?.extendedTextMessageData?.text ||
              "";
          }

          if (!text && msg.media) {
            text = getMediaText(msg.media.type, msg.media.name);
          }

          if (!text) {
            text = "[–°–æ–æ–±—â–µ–Ω–∏–µ]";
          }

          let createdAt = Date.now();
          if (typeof msg.timestamp === "number") {
            createdAt = msg.timestamp * 1000;
          } else if (msg.timestamp) {
            const parsed = Date.parse(msg.timestamp);
            createdAt = isNaN(parsed) ? Date.now() : parsed;
          } else if (typeof msg.created_at === "number") {
            createdAt = msg.created_at * 1000;
          } else if (msg.created_at) {
            const parsed = Date.parse(msg.created_at);
            createdAt = isNaN(parsed) ? Date.now() : parsed;
          }

          const status = isOutgoing
            ? msg.status === "read"
              ? "read"
              : msg.status === "delivered"
              ? "delivered"
              : msg.status === "sent"
              ? "sent"
              : "sent"
            : undefined;

          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
          const message: Message = {
            id: baseId,
            chatId: decodedChatId,
            author: isOutgoing ? "me" : "them",
            text: text.trim(),
            time: fmtTime(createdAt),
            createdAt,
            status,
          };

          // üîπ –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú REPLYTo –ò–ó –õ–û–ö–ê–õ–¨–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê
          if (messageReplies.has(baseId)) {
            message.replyTo = messageReplies.get(baseId);
            console.log(`üîπ RESTORED replyTo for message ${baseId}:`, message.replyTo);
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
          if (msg.media) {
            message.media = {
              url: msg.media.url || "",
              type: (msg.media.type || "document") as
                | "image"
                | "video"
                | "document"
                | "audio",
              name: msg.media.name,
              size: msg.media.size,
              mime: msg.media.mime,
            };
          }

          mapped.push(message);
        } catch (msgError) {
          console.error("Error processing message:", msgError, msg);
        }
      });

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
      mapped.sort((a, b) => (a.createdAt ?? 0) - (b.createdAt ?? 0));

      console.log(`Successfully loaded ${mapped.length} messages`);
      console.log(`üîπ Messages with replyTo:`, mapped.filter(m => m.replyTo).length);
      setMessages(mapped);
    } catch (error) {
      console.error("Error loading messages:", error);
      if (!silent) {
        setError(
          error instanceof Error ? error.message : "Failed to load messages"
        );
      }
    } finally {
      if (!silent) setLoadingMessages(false);
    }
  },
  [messageReplies] // üîπ –î–û–ë–ê–í–¨–¢–ï messageReplies –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
);
  const saveMessageReply = (messageId: string, replyTo: ReplyMessage) => {
    setMessageReplies((prev) => new Map(prev).set(messageId, replyTo));
  };

  const getMediaText = (mediaType: string, fileName?: string) => {
    switch (mediaType?.toLowerCase()) {
      case "image":
        return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      case "video":
        return "üé• –í–∏–¥–µ–æ";
      case "audio":
        return "üéµ –ê—É–¥–∏–æ";
      case "document":
        // –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∏—à–ª–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        if (fileName?.match(/\.(jpg|jpeg|png|gif|webp)$/i)) {
          return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
        }
        return `üìÑ ${fileName || "–î–æ–∫—É–º–µ–Ω—Ç"}`;
      default:
        return "üìé –§–∞–π–ª";
    }
  };

  useEffect(() => {
    const handleWebSocketMessage = (message: any) => {
      console.log("Processing WebSocket message:", message);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
      if (
        (message.type === "new_message" || message.event === "message") &&
        message.media
      ) {
        console.log("New media message received:", message);

        const messageChatId = message.chat_id || message.from;

        if (messageChatId === chatId) {
          setMessages((prev) => {
            const newMessage: Message = {
              id: message.id_message || `ws-${Date.now()}`,
              chatId: messageChatId,
              author: "them",
              text: getIncomingMediaText(message.media),
              time: fmtTime(Date.now()),
              createdAt: Date.now(),
              media: {
                url: message.media.url,
                type: detectMediaTypeFromData(message.media), // üîπ –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï
                name: message.media.name,
                size: message.media.size,
                mime: message.media.mime,
              },
            };

            if (prev.some((m) => m.id === newMessage.id)) return prev;

            return [...prev, newMessage].sort(
              (a, b) => (a.createdAt ?? 0) - (b.createdAt ?? 0)
            );
          });

          setTimeout(scrollToBottom, 100);
        }
      }
    };

    // üîπ –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–¥–∏–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    const detectMediaTypeFromData = (
      mediaData: any
    ): "image" | "video" | "audio" | "document" => {
      console.log("üîç Detecting media type:", mediaData);
      
      // –ï—Å–ª–∏ —Ç–∏–ø —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω –≤ –¥–∞–Ω–Ω—ã—Ö
      if (mediaData.type && mediaData.type !== "document") {
        console.log("‚úÖ Using explicit type:", mediaData.type);
        return mediaData.type;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ MIME —Ç–∏–ø—É
      if (mediaData.mime) {
        if (mediaData.mime.startsWith("image/")) {
          console.log("‚úÖ Detected image by MIME:", mediaData.mime);
          return "image";
        }
        if (mediaData.mime.startsWith("video/")) {
          console.log("‚úÖ Detected video by MIME:", mediaData.mime);
          return "video";
        }
        if (mediaData.mime.startsWith("audio/")) {
          console.log("‚úÖ Detected audio by MIME:", mediaData.mime);
          return "audio";
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      if (mediaData.name || mediaData.url) {
        const fileName = mediaData.name || mediaData.url;
        const ext = fileName.split(".").pop()?.toLowerCase();
        const imageExts = ["jpg", "jpeg", "png", "gif", "webp", "bmp", "svg"];
        const videoExts = ["mp4", "avi", "mov", "mkv", "webm", "3gp", "ogv"];
        const audioExts = ["mp3", "wav", "ogg", "aac", "m4a", "flac"];

        if (imageExts.includes(ext)) {
          console.log("‚úÖ Detected image by extension:", ext);
          return "image";
        }
        if (videoExts.includes(ext)) {
          console.log("‚úÖ Detected video by extension:", ext);
          return "video";
        }
        if (audioExts.includes(ext)) {
          console.log("‚úÖ Detected audio by extension:", ext);
          return "audio";
        }
      }

      console.log("‚ö†Ô∏è Defaulting to document type");
      return "document";
    };

    // üîπ –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
    const getIncomingMediaText = (mediaData: any) => {
      const mediaType = detectMediaTypeFromData(mediaData);

      switch (mediaType) {
        case "image":
          return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
        case "video":
          return "üé• –í–∏–¥–µ–æ";
        case "audio":
          return "üéµ –ê—É–¥–∏–æ";
        case "document":
          // –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∏—à–ª–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
          if (
            mediaData.name?.match(/\.(jpg|jpeg|png|gif|webp)$/i) ||
            mediaData.mime?.startsWith("image/")
          ) {
            return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
          }
          return `üìÑ ${mediaData.name || "–î–æ–∫—É–º–µ–Ω—Ç"}`;
        default:
          return "üìé –§–∞–π–ª";
      }
    };

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    const getStatusFromAck = (ack: number) => {
      switch (ack) {
        case 1:
          return "sent";
        case 2:
          return "delivered";
        case 3:
          return "read";
        default:
          return "sent";
      }
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    onMessage(handleWebSocketMessage);

    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      offMessage(handleWebSocketMessage);
    };
  }, [chatId, onMessage, offMessage, loadChats]);

  // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —á–∞—Ç–∞
  const handleCreateChat = async (rawPhone: string) => {
    const phone = normalizePhone(rawPhone);
    console.log("Creating temp chat with phone:", phone);

    setHiddenPhones((prev) => (prev.includes(phone) ? prev : [...prev, phone]));

    const tempChatId = `temp:${phone}`;
    console.log("Temp chat ID:", tempChatId);

    router.push(`/${tempChatId}`);
    setMessages([]);
  };

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  // üîπ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const handleSend = async (text: string, replyTo?: ReplyMessage) => {
    if (!text || !chatId) {
      console.log("Cannot send: no text or chatId");
      return;
    }

    const now = Date.now();
    const tempMsgId = crypto.randomUUID();
    // üîπ –°–û–•–†–ê–ù–Ø–ï–ú replyTo –î–û —Å–æ–∑–¥–∞–Ω–∏—è optimistic —Å–æ–æ–±—â–µ–Ω–∏—è
    const currentReplyTo = replyTo;

    const optimistic: Message = {
      id: tempMsgId,
      chatId,
      author: "me",
      text,
      time: fmtTime(now),
      createdAt: now,
      status: "sent",
      replyTo: currentReplyTo
        ? {
            id: currentReplyTo.id,
            author: currentReplyTo.author,
            text: currentReplyTo.text,
            media: currentReplyTo.media,
          }
        : undefined,
    };

    // üîπ –°–û–•–†–ê–ù–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û REPLYTo
    if (currentReplyTo) {
      saveMessageReply(tempMsgId, {
        id: currentReplyTo.id,
        author: currentReplyTo.author,
        text: currentReplyTo.text,
        media: currentReplyTo.media,
      });
    }

    console.log("üîπ OPTIMISTIC MESSAGE:", {
      id: tempMsgId,
      text: text,
      hasReplyTo: !!currentReplyTo,
      replyTo: currentReplyTo,
    });

    const stick = isNearBottom();
    setMessages((prev) =>
      [...prev, optimistic].sort(
        (a, b) => (a.createdAt ?? 0) - (b.createdAt ?? 0)
      )
    );
    setDraft("");

    // üîπ –°–ë–†–ê–°–´–í–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –û–¢–í–ï–¢–ê –°–†–ê–ó–£ –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
    setReplyingTo(null);

    if (stick) setTimeout(scrollToBottom, 40);

    try {
      let realChatId = chatId;

      // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π
      if (isTempChat && tempPhone) {
        console.log("=== CREATING REAL CHAT FROM TEMP ===");

        if (tempPhone.length !== 11) {
          const errorMsg = `–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞: ${tempPhone.length} —Ü–∏—Ñ—Ä. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 11.`;
          console.error(errorMsg);
          setMessages((prev) =>
            prev.map((m) =>
              m.id === tempMsgId ? { ...m, status: "failed" } : m
            )
          );
          alert(errorMsg);
          return;
        }

        const apiPhone = `${tempPhone}@c.us`;
        console.log("API phone:", apiPhone);

        console.log("Calling start chat API...");

        try {
          const start = await fetch("/api/whatsapp/chats/start", {
            method: "POST",
            headers: { 
              "Content-Type": "application/json",
              "Authorization": `Bearer ${apiConfig.getAccessToken()}`
            },
            body: JSON.stringify({ phone: apiPhone }),
          });

          console.log("Start chat API response status:", start.status);

          let startData;
          try {
            startData = await start.json();
          } catch (parseError) {
            console.error("Failed to parse start chat response:", parseError);
            const textResponse = await start.text();
            startData = {
              error: "Invalid JSON response",
              raw: textResponse,
              status: start.status,
            };
          }

          if (!start.ok || !startData?.chat_id) {
            let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç";
            if (startData?.error) errorMessage += `: ${startData.error}`;

            console.error("Failed to create chat:", errorMessage);
            setMessages((prev) =>
              prev.map((m) =>
                m.id === tempMsgId ? { ...m, status: "failed" } : m
              )
            );
            alert(errorMessage);
            return;
          }

          realChatId = String(startData.chat_id);
          console.log("Real chat created with ID:", realChatId);

          setChats((prev) => [
            ...prev,
            {
              id: realChatId,
              chat_id: realChatId,
              is_group: false,
              name: tempPhone,
              phone: tempPhone,
              lastMessage: text,
              time: fmtTime(now),
              unread: 0,
              avatarFallback: tempPhone.slice(0, 2),
              avatarUrl: `https://api.dicebear.com/9.x/initials/svg?seed=${encodeURIComponent(
                tempPhone
              )}`,
              updatedAt: now,
            },
          ]);

          router.replace(`/${realChatId}`);
        } catch (networkError) {
          console.error("Network error creating chat:", networkError);
          setMessages((prev) =>
            prev.map((m) =>
              m.id === tempMsgId ? { ...m, status: "failed" } : m
            )
          );
          alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞");
          return;
        }
      }

      console.log("=== SENDING MESSAGE TO REAL CHAT ===");
      console.log("Real chat ID:", realChatId);
      console.log("WebSocket connected:", isConnected);
      console.log("Replying to:", currentReplyTo); // üîπ –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ

      // üîπ –ü–†–ò–û–†–ò–¢–ï–¢: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (isConnected) {
        console.log("Sending via WebSocket");

        const wsMessage = {
          action: "send_message",
          chat_id: realChatId,
          message: text,
          temp_id: tempMsgId,
          type: "text",
          // üîπ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          reply_to: currentReplyTo
            ? {
                message_id: currentReplyTo.id,
                chat_id: realChatId,
              }
            : undefined,
        };

        console.log("WebSocket message payload:", wsMessage);

        sendMessage(wsMessage);

        const fallbackTimeout = setTimeout(() => {
          console.log("WebSocket timeout, falling back to HTTP");
          sendViaHttp(realChatId, text, tempMsgId, currentReplyTo);
        }, 3000);

        const cleanup = () => clearTimeout(fallbackTimeout);

        const handleSentConfirmation = (message: any) => {
          if (message.temp_id === tempMsgId || message.id_message) {
            console.log("Message sent confirmation received:", message);
            setMessages((prev) =>
              prev.map((m) =>
                m.id === tempMsgId
                  ? {
                      ...m,
                      id: message.id_message || m.id,
                      status: "delivered",
                    }
                  : m
              )
            );
            cleanup();
            offMessage(handleSentConfirmation);
          }
        };

        onMessage(handleSentConfirmation);

        setTimeout(() => {
          loadChats(true);
        }, 1000);
      } else {
        // üîπ –†–ï–ó–ï–†–í: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ HTTP –µ—Å–ª–∏ WebSocket –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
        console.log("WebSocket not connected, sending via HTTP");
        sendViaHttp(realChatId, text, tempMsgId, currentReplyTo);
      }
    } catch (error) {
      console.error("Send message error:", error);
      setMessages((prev) =>
        prev.map((m) => (m.id === tempMsgId ? { ...m, status: "failed" } : m))
      );
      alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ");
    }
    // üîπ –£–ë–ò–†–ê–ï–ú setReplyingTo(null) –æ—Ç—Å—é–¥–∞ - —É–∂–µ —Å–±—Ä–æ—Å–∏–ª–∏ –≤—ã—à–µ
  };

  // üîπ –£–ü–†–û–©–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileSelect = async (file: File) => {
    console.log("=== FILE SELECTED ===");
    console.log("File details:", {
      name: file.name,
      type: file.type,
      size: file.size,
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if (file.size > 50 * 1024 * 1024) {
      alert("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50MB)");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
    const allowedTypes = [
      "image/jpeg",
      "image/jpg",
      "image/png",
      "image/gif",
      "image/webp",
      "video/mp4",
      "video/avi",
      "video/mov",
      "audio/mpeg",
      "audio/mp3",
      "audio/wav",
      "audio/ogg",
      "application/pdf",
      "application/msword",
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      "text/plain",
    ];

    if (!allowedTypes.includes(file.type)) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ${file.type}`);
    }

    try {
      await handleSendMedia(file);
    } catch (error) {
      console.error("Failed to send media:", error);
      alert(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: " +
          (error instanceof Error ? error.message : "Unknown error")
      );
    }
  };

  // üîπ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤
  const handleSendMedia = async (file: File) => {
    if (!chatId) {
      console.log("Cannot send media: no chatId");
      return;
    }

    const now = Date.now();
    const tempMsgId = crypto.randomUUID();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const getFileType = (
      mimeType: string,
      fileName: string
    ): "image" | "video" | "document" | "audio" => {
      console.log("üîç Determining file type for:", { mimeType, fileName });
      
      if (mimeType.startsWith("image/")) return "image";
      if (mimeType.startsWith("video/")) return "video";
      if (mimeType.startsWith("audio/")) return "audio";
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ MIME –Ω–µ—Ç–æ—á–Ω—ã–π
      const ext = fileName.split('.').pop()?.toLowerCase();
      if (['mp4', 'avi', 'mov', 'mkv', 'webm'].includes(ext || '')) return "video";
      if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(ext || '')) return "image";
      if (['mp3', 'wav', 'ogg', 'aac'].includes(ext || '')) return "audio";
      
      return "document";
    };

    const fileType = getFileType(file.type, file.name);
    console.log("üìÅ File type determined:", fileType, "for file:", file.name);

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const optimistic: Message = {
      id: tempMsgId,
      chatId,
      author: "me",
      text: getMediaText(fileType, file.name),
      time: fmtTime(now),
      createdAt: now,
      status: "sent",
      // üîπ –î–û–ë–ê–í–õ–ï–ù–û: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–≤–µ—Ç–µ –¥–ª—è –º–µ–¥–∏–∞
      replyTo: replyingTo
        ? {
            id: replyingTo.id,
            author: replyingTo.author,
            text: replyingTo.text,
            media: replyingTo.media,
          }
        : undefined,
      media: {
        url: URL.createObjectURL(file),
        type: fileType,
        name: file.name,
        size: file.size,
        mime: file.type,
      },
    };

    const stick = isNearBottom();
    setMessages((prev) =>
      [...prev, optimistic].sort(
        (a, b) => (a.createdAt ?? 0) - (b.createdAt ?? 0)
      )
    );
    if (stick) setTimeout(scrollToBottom, 40);

    try {
      let realChatId = chatId;

      // üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
      if (isTempChat && tempPhone) {
        console.log("=== CREATING REAL CHAT FROM TEMP FOR MEDIA ===");

        if (tempPhone.length !== 11) {
          throw new Error(
            `–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞: ${tempPhone.length} —Ü–∏—Ñ—Ä. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 11.`
          );
        }

        const apiPhone = `${tempPhone}@c.us`;
        console.log("API phone for media:", apiPhone);

        const start = await fetch("/api/whatsapp/chats/start", {
          method: "POST",
          headers: { 
            "Content-Type": "application/json",
            "Authorization": `Bearer ${apiConfig.getAccessToken()}`
          },
          body: JSON.stringify({ phone: apiPhone }),
        });

        if (!start.ok) {
          const errorData = await start
            .json()
            .catch(() => ({ error: "Unknown error" }));
          throw new Error(errorData?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç");
        }

        const startData = await start.json();

        if (!startData?.chat_id) {
          throw new Error("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª chat_id");
        }

        realChatId = String(startData.chat_id);
        console.log("Real chat created for media with ID:", realChatId);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setChats((prev) => [
          {
            id: realChatId,
            chat_id: realChatId,
            is_group: false,
            name: tempPhone,
            phone: tempPhone,
            lastMessage: "üìé –ú–µ–¥–∏–∞",
            time: fmtTime(now),
            unread: 0,
            avatarFallback: tempPhone.slice(0, 2),
            avatarUrl: `https://api.dicebear.com/9.x/initials/svg?seed=${encodeURIComponent(
              tempPhone
            )}`,
            updatedAt: now,
          },
          ...prev,
        ]);

        router.replace(`/${realChatId}`);
      }

      console.log("=== SENDING FILE TO CHAT ===");
      console.log("Real chat ID:", realChatId);
      console.log("File:", file.name, file.type, file.size);
      console.log("Replying to:", replyingTo); // üîπ –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ

      // üîπ –°–û–ó–î–ê–ï–ú FormData —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      const formData = new FormData();
      formData.append("file", file);
      formData.append("caption", file.name);

      // üîπ –î–û–ë–ê–í–õ–Ø–ï–ú –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (replyingTo) {
        formData.append("reply_to_message_id", replyingTo.id);
      }

      console.log("Sending FormData to API...");

      // üîπ –û–¢–ü–†–ê–í–õ–Ø–ï–ú —á–µ—Ä–µ–∑ API
      const sendMediaRes = await fetch(
        `/api/whatsapp/chats/${encodeURIComponent(realChatId)}/send/media`,
        {
          method: "POST",
          body: formData,
        }
      );

      console.log("Send media response status:", sendMediaRes.status);

      // üîπ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê
      let responseData;
      try {
        const responseText = await sendMediaRes.text();
        console.log("Send media response text:", responseText);

        responseData = responseText ? JSON.parse(responseText) : {};
      } catch (parseError) {
        console.error("Failed to parse send media response:", parseError);
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
      }

      if (!sendMediaRes.ok) {
        console.error("Send media API error:", responseData);

        // üîπ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–®–ò–ë–ö–ï 422
        if (sendMediaRes.status === 422) {
          const errorDetails =
            responseData.details ||
            responseData.error ||
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏";
          throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${JSON.stringify(errorDetails)}`);
        }

        throw new Error(responseData.error || `HTTP ${sendMediaRes.status}`);
      }

      console.log("Media sent successfully:", responseData);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      setMessages((prev) =>
        prev.map((m) =>
          m.id === tempMsgId
            ? {
                ...m,
                id: responseData?.id_message || tempMsgId,
                status: "delivered",
                media: m.media
                  ? {
                      ...m.media,
                      url:
                        responseData?.media_url ||
                        responseData?.url ||
                        m.media.url,
                    }
                  : m.media,
              }
            : m
        )
      );

      // üîπ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      setReplyingTo(null);

      // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      setTimeout(() => {
        loadMessages(realChatId, true);
        loadChats(true);
      }, 1000);
    } catch (error) {
      console.error("Send media error:", error);

      // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ failed
      setMessages((prev) =>
        prev.map((m) => (m.id === tempMsgId ? { ...m, status: "failed" } : m))
      );

      // üîπ –ë–û–õ–ï–ï –ò–ù–§–û–†–ú–ê–¢–ò–í–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–®–ò–ë–ö–ï
      const errorMessage =
        error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";

      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ "${file.name}": ${errorMessage}`);
    }
  };

  const sendViaHttp = async (
    realChatId: string,
    text: string,
    tempMsgId: string,
    replyTo?: ReplyMessage
  ) => {
    try {
      console.log("üîπ Sending HTTP request with replyTo:", replyTo);

      // üîπ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –í–ê–®–ï–ì–û API
      const requestBody: any = {
        text: text,
      };

      if (replyTo) {
        requestBody.reply_to = {
          message_id: replyTo.id,
        };
      }

      console.log("üîπ HTTP Request body:", requestBody);

      const sendRes = await fetch(
        `/api/whatsapp/chats/${encodeURIComponent(realChatId)}/send`,
        {
          method: "POST",
          headers: { 
            "Content-Type": "application/json",
            "Authorization": `Bearer ${apiConfig.getAccessToken()}`
          },
          body: JSON.stringify(requestBody),
        }
      );

      let sendData;
      try {
        sendData = await sendRes.json();
      } catch (parseError) {
        console.error("Failed to parse send message response:", parseError);
        sendData = { error: "Invalid response" };
      }

      if (sendRes.ok) {
        console.log("Message sent successfully via HTTP");
        setMessages((prev) =>
          prev.map((m) =>
            m.id === tempMsgId
              ? {
                  ...m,
                  id: sendData?.id_message || tempMsgId,
                  status: "delivered",
                }
              : m
          )
        );
        setTimeout(() => {
          loadMessages(realChatId, true);
          loadChats(true);
        }, 1000);
      } else {
        console.error("Failed to send message via HTTP:", sendData);
        setMessages((prev) =>
          prev.map((m) => (m.id === tempMsgId ? { ...m, status: "failed" } : m))
        );
        alert(sendData?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
      }
    } catch (error) {
      console.error("HTTP send error:", error);
      setMessages((prev) =>
        prev.map((m) => (m.id === tempMsgId ? { ...m, status: "failed" } : m))
      );
    }
  };
  // Effects
  useEffect(() => {
    loadChats();
  }, [loadChats]);

  useEffect(() => {
    if (chatId) {
      console.log("Loading messages for chat:", chatId);
      loadMessages(chatId);
    }
  }, [chatId, loadMessages]);

  // HTTP Polling –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–≥–¥–∞ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  useEffect(() => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ polling
    const shouldPoll = !FEATURES.WEBSOCKET_ENABLED || 
                      connectionState === 'error' || 
                      connectionState === 'disconnected';

    if (!shouldPoll) {
      console.log("üì° WebSocket –∞–∫—Ç–∏–≤–µ–Ω - polling –æ—Ç–∫–ª—é—á–µ–Ω");
      return;
    }

    console.log("üîÑ HTTP polling –∞–∫—Ç–∏–≤–µ–Ω (WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)");
    
    // –ë–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ HTTP —Ä–µ–∂–∏–º–µ
    const pollInterval = setInterval(() => {
      if (document.visibilityState === "visible") {
        setIsPolling(true);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç—ã
        loadChats(true).finally(() => setIsPolling(false));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        if (chatId && !isTempChat) {
          loadMessages(chatId, true);
        }
      }
    }, FEATURES.HTTP_POLLING_INTERVAL);

    return () => {
      console.log("üîÑ HTTP polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
      clearInterval(pollInterval);
    };
  }, [chatId, isTempChat, connectionState, loadChats, loadMessages]);

  useEffect(() => {
    if (isNearBottom()) scrollToBottom();
  }, [messages]);

  const selectedChat = useMemo(
    () => chats.find((c) => c.id === chatId),
    [chats, chatId]
  );

  const visibleChats = useMemo(
    () =>
      chats.filter(
        (c) => !(hiddenPhones.includes(c.phone || "") && (c.unread ?? 0) === 0)
      ),
    [chats, hiddenPhones]
  );

  const filteredChats = useMemo(
    () =>
      visibleChats.filter(
        (c) =>
          c.name?.toLowerCase().includes(query.toLowerCase()) ||
          c.phone?.includes(query)
      ),
    [visibleChats, query]
  );

  const unhideCurrent = () => {
    const phone = isTempChat ? tempPhone : selectedChat?.phone;
    if (!phone) return;
    setHiddenPhones((prev) => prev.filter((p) => p !== phone));
  };

  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testWebSocketConnection = () => {
    console.log("=== WEBSOCKET TEST ===");
    console.log("Connected:", isConnected);

    // –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (isConnected && chatId && !isTempChat) {
      sendMessage({
        action: "ping",
        timestamp: Date.now(),
      });
    }
  };
  // –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ UI (–≤—Ä–µ–º–µ–Ω–Ω–æ)
  <Button
    variant="outline"
    size="sm"
    onClick={testWebSocketConnection}
    className="absolute top-2 right-2 z-50"
  >
    Test WS
  </Button>;

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket
  useEffect(() => {
    console.log("=== WEBSOCKET STATUS ===");
    console.log("Connected:", isConnected);
    console.log("State:", connectionState);
    console.log("Chat ID:", chatId);
    console.log("Is temp chat:", isTempChat);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (connectionState === 'connected' && !isTempChat && chatId) {
      console.log(`‚úÖ Ready to send messages for chat: ${chatId}`);
    } else if (connectionState === 'error') {
      console.log("‚ùå WebSocket connection failed - messages will be sent via HTTP");
    }
  }, [isConnected, connectionState, chatId, isTempChat]);
  const isLoadingUI = loadingChats || loadingMessages;

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞
  const scrollToBottom = useCallback(() => {
    if (bottomRef.current) {
      bottomRef.current.scrollIntoView({
        behavior: "smooth",
        block: "end",
        inline: "nearest",
      });
    }
  }, []);

  // –ê–≤—Ç–æ-—Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    const timer = setTimeout(() => {
      if (isNearBottom()) {
        scrollToBottom();
      }
    }, 100);

    return () => clearTimeout(timer);
  }, [messages, scrollToBottom]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const forceRefresh = useCallback(() => {
    console.log("Force refreshing chats and messages");
    loadChats();
    if (chatId) {
      loadMessages(chatId);
    }
  }, [loadChats, loadMessages, chatId]);

  // –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–æ–±–∏–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä
  <Button
    variant="ghost"
    size="icon"
    onClick={forceRefresh}
    disabled={loadingChats}
  >
    <RefreshCw className={`h-4 w-4 ${loadingChats ? "animate-spin" : ""}`} />
  </Button>;

  return (
    <TooltipProvider>
      {/* –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <div
        className={`fixed top-0 left-0 right-0 h-1 z-50 transition-all ${
          connectionState === 'connected' ? "bg-green-500" : 
          connectionState === 'connecting' ? "bg-yellow-500 animate-pulse" :
          connectionState === 'error' ? "bg-red-600 animate-pulse" :
          "bg-red-500 animate-pulse"
        }`}
        title={
          connectionState === 'connected' ? "WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω" :
          connectionState === 'connecting' ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..." :
          connectionState === 'error' ? "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" :
          "WebSocket –æ—Ç–∫–ª—é—á–µ–Ω"
        }
      />
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ */}
      {FEATURES.SHOW_CONNECTION_STATUS && (
        <>
          
          {FEATURES.WEBSOCKET_ENABLED && (connectionState === 'error' || connectionState === 'disconnected') && (
            <div className="fixed top-2 right-2 z-50 flex gap-2">
              <div className="bg-yellow-50 border border-yellow-200 text-yellow-800 px-3 py-1 rounded-md text-xs">
                üì° HTTP-—Ä–µ–∂–∏–º (WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
              </div>
              <Button
                variant="outline"
                size="sm"
                onClick={reconnect}
                className="bg-red-50 border-red-200 text-red-700 hover:bg-red-100"
              >
                üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å
              </Button>
            </div>
          )}
          
          {FEATURES.WEBSOCKET_ENABLED && connectionState === 'connecting' && (
            <div className="fixed top-2 right-2 z-50">
              <div className="bg-blue-50 border border-blue-200 text-blue-800 px-3 py-1 rounded-md text-xs">
                üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...
              </div>
            </div>
          )}
        </>
      )}

      {isPolling && (
        <div className="fixed top-1 left-0 right-0 h-0.5 bg-green-500/20 z-50" />
      )}

      {(isLoadingUI || isSwitchingChat) && (
        <div className="fixed inset-x-0 top-2 h-[2px] bg-green-500/30 animate-pulse z-50" />
      )}

      {/* –ú–æ–±–∏–ª—å–Ω—ã–π Sidebar */}
      <MobileSidebar
        open={mobileSidebarOpen}
        onOpenChange={setMobileSidebarOpen}
        query={query}
        setQuery={setQuery}
        chats={filteredChats}
        selectedId={chatId ?? undefined}
        setSelectedId={(id) => {
          console.log("Setting selected chat:", id);
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
          setIsSwitchingChat(true);
          // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          router.push(`/${encodeURIComponent(id)}`, { scroll: false });
          // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          setTimeout(() => setIsSwitchingChat(false), 300);
        }}
        onCreateChat={handleCreateChat}
        onDeleteChat={handleDeleteChat}
      />

      <div className="flex h-[calc(100vh-2rem)] md:h-screen w-full bg-background text-foreground">
        {/* Desktop Sidebar - –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω –ø–æ–¥ WhatsApp –≤ Sidebar.tsx */}
        <aside className="hidden md:flex md:w-[360px] lg:w-[400px] flex-col border-r border-gray-200 dark:border-gray-800">
          {loadingChats ? (
            // –°–∫–µ–ª–µ—Ç–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏
            <div className="p-2 space-y-1">
              {/* –°–∫–µ–ª–µ—Ç–æ–Ω —Ö–µ–¥–µ—Ä */}
              <div className="h-14 bg-gray-100 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-800" />
              {/* –°–∫–µ–ª–µ—Ç–æ–Ω –ø–æ–∏—Å–∫–∞ */}
              <div className="h-10 mx-2 bg-gray-100 dark:bg-gray-800 rounded-lg animate-pulse" />
              {/* –°–∫–µ–ª–µ—Ç–æ–Ω—ã —á–∞—Ç–æ–≤ */}
              {Array.from({ length: 8 }).map((_, i) => (
                <div key={i} className="flex items-center gap-3 p-4">
                  <div className="h-12 w-12 rounded-full bg-gray-100 dark:bg-gray-800 animate-pulse" />
                  <div className="flex-1 space-y-1">
                    <div className="h-3 w-3/4 bg-gray-100 dark:bg-gray-800 rounded animate-pulse" />
                    <div className="h-3 w-1/2 bg-gray-100 dark:bg-gray-800 rounded animate-pulse" />
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <Sidebar
              query={query}
              setQuery={setQuery}
              chats={filteredChats}
              selectedId={chatId ?? undefined}
              setSelectedId={(id) => {
                console.log("Setting selected chat:", id);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                setIsSwitchingChat(true);
                // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                router.push(`/${encodeURIComponent(id)}`, { scroll: false });
                // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => setIsSwitchingChat(false), 300);
              }}
              onCreateChat={handleCreateChat}
              onDeleteChat={handleDeleteChat}
            />
          )}
        </aside>

        {/* Chat area */}
        <main className="flex-1 flex flex-col">
          {/* üí¨ WhatsApp Style: –ú–æ–±–∏–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä —á–∞—Ç–∞ */}
          <div
            // üìå –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –§–æ–Ω –∏ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –≤ WhatsApp
            className="md:hidden border-b border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-900"
          >
            <div className="flex items-center justify-between p-3">
              {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Sidebar (–ù–∞–∑–∞–¥) */}
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setMobileSidebarOpen(true)}
                className="md:hidden flex-shrink-0"
              >
                <Menu className="h-5 w-5" />
              </Button>

              <div className="flex-1 text-center min-w-0">
                {selectedChat ? (
                  <div className="flex items-center gap-3 w-full pl-2">
                    {/* –ê–≤–∞—Ç–∞—Ä —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ */}
                    <Avatar className="h-10 w-10 flex-shrink-0">
                      <AvatarImage
                        src={selectedChat.avatarUrl}
                        alt={selectedChat.name}
                      />
                      <AvatarFallback className="bg-green-500 text-white">
                        {selectedChat.avatarFallback}
                      </AvatarFallback>
                    </Avatar>

                    {/* –ò–º—è –∏ —Å—Ç–∞—Ç—É—Å */}
                    <div className="text-left truncate">
                      <div className="font-semibold text-base truncate">
                        {selectedChat.name || selectedChat.phone}
                      </div>
                      <div className="text-xs text-green-600 dark:text-green-400">
                        {isConnected ? "–æ–Ω–ª–∞–π–Ω" : "–±—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ"}
                      </div>
                    </div>
                  </div>
                ) : (
                  // –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
                  <div className="font-medium text-gray-500 dark:text-gray-400">
                    –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç
                  </div>
                )}
              </div>

              {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Ö–µ–¥–µ—Ä–∞: –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è + –ú–µ–Ω—é —á–∞—Ç–∞ */}
              <div className="flex items-center gap-1 flex-shrink-0">
                {/* üìå –î–æ–±–∞–≤–ª–µ–Ω–æ: –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={forceRefresh}
                  disabled={loadingChats}
                >
                  <RefreshCw
                    className={`h-5 w-5 ${
                      loadingChats
                        ? "animate-spin text-green-500"
                        : "text-gray-500"
                    }`}
                  />
                </Button>

                {/* –ú–µ–Ω—é —á–∞—Ç–∞ */}
                <Button variant="ghost" size="icon">
                  <MoreVertical className="h-5 w-5 text-gray-500" />
                </Button>
              </div>
            </div>
          </div>

          {/* –ë–∞–Ω–Ω–µ—Ä –ø—Ä–æ —Å–∫—Ä—ã—Ç—ã–π —á–∞—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) */}
          {(isTempChat ||
            (selectedChat &&
              hiddenPhones.includes(selectedChat.phone || ""))) && (
            <div className="px-3 md:px-6 py-2 text-[12px] bg-yellow-50 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-300 border-b border-yellow-200 dark:border-yellow-800 flex items-center gap-2">
              <span>
                –°–∫—Ä—ã—Ç—ã–π —á–∞—Ç —Å{" "}
                <b>{isTempChat ? tempPhone : selectedChat?.phone}</b> ‚Äî –Ω–µ
                –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å–ª–µ–≤–∞.
              </span>
              <Button
                variant="link"
                className="h-auto p-0 text-xs text-yellow-700 dark:text-yellow-300 hover:text-yellow-600 dark:hover:text-yellow-200"
                onClick={unhideCurrent}
              >
                –ü–æ–∫–∞–∑–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ
              </Button>
            </div>
          )}

          {/* Messages */}
          {chatId ? (
            <ScrollArea
              className="flex-1"
              ref={(el) => {
                const vp = el?.querySelector(
                  "[data-radix-scroll-area-viewport]"
                ) as HTMLDivElement | null;
                scrollContainerRef.current = vp ?? null;
              }}
              style={{
                backgroundImage: `url('/telegramm-bg-tile.png')`,
                backgroundAttachment: "fixed",
                backgroundRepeat: "no-repeat",
                // üöÄ –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ–Ω–∞
                backgroundSize: "cover", // –∏–ª–∏ '100% 100%', –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
                backgroundColor: "#ECE5DD",
              }}
            >
              ¬† ¬† ¬† ¬† ¬† ¬† ¬†{" "}
              <div className="px-3 md:px-6 py-4 space-y-3">
                ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†{" "}
                {loadingMessages ? (
                  <>
                    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†{" "}
                    {Array.from({ length: 6 }).map((_, i) => (
                      <div
                        key={i}
                        className={`flex ${
                          i % 2 ? "justify-end" : "justify-start"
                        }`}
                      >
                        ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†{" "}
                        <div className="h-12 w-56 bg-gray-200 dark:bg-gray-700 rounded-xl animate-pulse" />
                        ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†{" "}
                      </div>
                    ))}
                    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†{" "}
                  </>
                ) : messages.length === 0 ? (
                  <div className="text-center text-muted-foreground py-8">
                    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†{" "}
                    {isTempChat
                      ? "–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —á–∞—Ç –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
                      : "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"}
                    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†{" "}
                  </div>
                ) : (
                  messages.map((m) => (
                    <MessageBubble
                      key={m.id}
                      msg={m}
                      onReply={handleReplyToMessage}
                      isReplying={replyingTo?.id === m.id}
                      onDelete={handleDeleteMessage}
                    />
                  ))
                )}
                ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† <div ref={bottomRef} />¬† ¬† ¬† ¬† ¬† ¬† ¬†{" "}
              </div>
              ¬† ¬† ¬† ¬† ¬† ¬†{" "}
            </ScrollArea>
          ) : (
            // –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ (—É–∂–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω)
            <div className="flex-1 flex items-center justify-center p-4">
              <div className="text-center max-w-sm">
                <div className="text-2xl font-semibold mb-2 text-green-500">
                  <MessageCircleMore className="inline h-6 w-6 mb-1" /> WhatsApp
                  Web
                </div>
                <p className="text-muted-foreground mb-4">
                  –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ, –≤—ã–±—Ä–∞–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –∏–ª–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –º–µ–Ω—é
                  <MoreVertical className="inline h-4 w-4 mx-1" />
                </p>
                <Button
                  onClick={() => setMobileSidebarOpen(true)}
                  className="w-full bg-green-500 hover:bg-green-600"
                >
                  <Menu className="h-4 w-4 mr-2" />
                  –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                </Button>
              </div>
            </div>
          )}

          {/* Composer */}
          {chatId && (
            <div className="sticky bottom-0 z-10 bg-transparent">
              {/* Composer —É–∂–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω –ø–æ–¥ WhatsApp */}
              <Composer
                draft={draft}
                setDraft={setDraft}
                onSend={handleSend}
                onFileSelect={handleFileSelect}
                disabled={!chatId}
                placeholder={"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."}
                replyingTo={replyingTo}
                onCancelReply={handleCancelReply}
              />
            </div>
          )}
        </main>
      </div>
    </TooltipProvider>
  );
}
