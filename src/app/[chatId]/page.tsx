// src/app/[chatId]/page.tsx
"use client";
import { useCallback, useEffect, useMemo, useRef, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { TooltipProvider } from "@/components/ui/tooltip";
import type { Chat, Message } from "@/components/chat/types";
import { Sidebar } from "@/components/chat/Sidebar";
import { MessageBubble } from "@/components/chat/MessageBubble";
import { Composer } from "@/components/chat/Composer";
import { useWebSocket } from "@/providers/WebSocketProvider";
import { MobileSidebar } from "@/components/chat/MobileSidebar";
import { Menu, RefreshCw } from "lucide-react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { apiConfig } from "@/lib/api-config";

export default function ChatPage() {
  const router = useRouter();
  const params = useParams();

  // üîπ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ chatId
  const rawChatId = params?.chatId
    ? Array.isArray(params.chatId)
      ? params.chatId[0]
      : params.chatId
    : null;

  const chatId = rawChatId ? decodeURIComponent(rawChatId) : null;

  if (!chatId) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-center">
          <div className="text-lg font-semibold mb-2">–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
          <p className="text-muted-foreground mb-4">
            –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
          </p>
          <Button onClick={() => router.push("/")}>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤
          </Button>
        </div>
      </div>
    );
  }

  const [hiddenPhones, setHiddenPhones] = useState<string[]>([]);
  const [query, setQuery] = useState("");
  const [chats, setChats] = useState<Chat[]>([]);
  const [messages, setMessages] = useState<Message[]>([]);
  const [loadingChats, setLoadingChats] = useState(true);
  const [loadingMessages, setLoadingMessages] = useState(true);
  const [draft, setDraft] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [isPolling, setIsPolling] = useState(false);
  const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false);
  const bottomRef = useRef<HTMLDivElement | null>(null);
  const scrollContainerRef = useRef<HTMLDivElement | null>(null);

  // üîπ WebSocket —Ö—É–∫–∏ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó –Ω–∞–≤–µ—Ä—Ö—É
  const { isConnected, sendMessage, onMessage, offMessage } = useWebSocket();

  // üîπ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç
  const isTempChat = !!chatId?.startsWith("temp:");
  const tempPhone = isTempChat ? chatId.replace("temp:", "") : null;

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
  const isNearBottom = () => {
    const el = scrollContainerRef.current;
    if (!el) return true;
    return el.scrollHeight - el.scrollTop - el.clientHeight < 120;
  };

  const fmtTime = (ts: number) => {
    try {
      return new Date(ts).toLocaleTimeString("ru-RU", {
        hour: "2-digit",
        minute: "2-digit",
      });
    } catch {
      return "00:00";
    }
  };

  const normalizePhone = (raw: string) => {
    let p = raw.trim().replace(/\D/g, "");

    if (p.length === 11) {
      return p;
    }

    if (p.length === 10) {
      return "7" + p;
    }

    if (p.length < 10) {
      console.error("Phone number too short:", p);
      return p;
    }

    if (p.length > 11) {
      console.warn("Phone number too long, trimming:", p);
      return p.slice(0, 11);
    }

    return p;
  };

  // ‚úÖ loadChats —Å useCallback
  const loadChats = useCallback(async (silent = false) => {
    if (!silent) setLoadingChats(true);
    setError(null);
    try {
      const res = await fetch("/api/whatsapp/chats", {
        cache: "no-store",
        headers: {
          "Cache-Control": "no-cache",
        },
      });

      let data;
      if (!res.ok) {
        console.warn("Chats API returned error:", res.status);
        data = []; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      } else {
        data = await res.json();
      }

      const items: any[] = Array.isArray(data) ? data : [];

      const mapped: Chat[] = items.map((raw: any, i: number) => {
        const rawId = raw?.chat_id || raw?.id;
        const id = rawId ? String(rawId) : `temp-${i}`;
        let phone = raw?.phone || raw?.id || raw?.chat_id || "";
        phone = String(phone).replace("@c.us", "");
        const name = phone || `–ß–∞—Ç ${id}`;
        const ts =
          typeof raw?.updated_at === "number"
            ? raw.updated_at * 1000
            : raw?.updated_at
            ? Date.parse(raw.updated_at)
            : typeof raw?.timestamp === "number"
            ? raw.timestamp * 1000
            : raw?.timestamp
            ? Date.parse(raw.timestamp)
            : Date.now();
        const last = raw?.last_message || raw?.text || "";

        return {
          id,
          chat_id: raw?.chat_id || id,
          is_group: raw?.is_group || false,
          name,
          phone,
          lastMessage: last,
          time: fmtTime(ts),
          unread: raw?.unread_count || 0,
          avatarFallback: name?.slice(0, 2).toUpperCase() || "?",
          avatarUrl: `https://api.dicebear.com/9.x/initials/svg?seed=${encodeURIComponent(
            name
          )}`,
          updatedAt: ts,
        };
      });

      mapped.sort((a, b) => (b.updatedAt ?? 0) - (a.updatedAt ?? 0));
      setChats(mapped);
    } catch (e: any) {
      console.error("Failed to load chats:", e);
      setChats([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (!silent) {
        setError(e?.message ?? "Failed to load chats");
      }
    } finally {
      if (!silent) setLoadingChats(false);
    }
  }, []);

  const loadMessages = useCallback(
    async (currentChatId: string, silent = false) => {
      if (!currentChatId) {
        if (!silent) setLoadingMessages(false);
        return;
      }

      const decodedChatId = decodeURIComponent(currentChatId);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
      if (decodedChatId.startsWith("temp:")) {
        setMessages([]);
        if (!silent) setLoadingMessages(false);
        return;
      }

      if (!silent) setLoadingMessages(true);

      try {
        console.log(`Loading messages for chat: ${decodedChatId}`);

        const res = await fetch(
          `/api/whatsapp/chats/${encodeURIComponent(decodedChatId)}/messages`,
          {
            cache: "no-store",
            headers: {
              "Cache-Control": "no-cache",
            },
          }
        );

        // üîπ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
        if (!res.ok) {
          console.warn(`Messages API error: ${res.status} ${res.statusText}`);

          // –î–ª—è 404 –æ—à–∏–±–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ (—á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)
          if (res.status === 404) {
            setMessages([]);
            return;
          }

          // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
          try {
            const errorData = await res.json();
            throw new Error(errorData?.error || `HTTP ${res.status}`);
          } catch {
            throw new Error(`Failed to load messages: ${res.status}`);
          }
        }

        const data = await res.json();
        console.log("Messages API response:", data);

        // üîπ –ë–ï–ó–û–ü–ê–°–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–•
        let messagesArray: any[] = [];

        if (Array.isArray(data)) {
          messagesArray = data;
        } else if (data && Array.isArray(data.items)) {
          messagesArray = data.items;
        } else if (data && typeof data === "object") {
          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏—è
          messagesArray = Object.values(data).filter(Array.isArray).flat();
        }

        console.log(`Processing ${messagesArray.length} messages`);

        // üîπ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –° –î–£–ë–õ–ò–ö–ê–¢–ê–ú–ò
        const seenIds = new Set<string>();
        const mapped: Message[] = [];

        messagesArray.forEach((msg: any, index: number) => {
          try {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID
            const baseId =
              msg.id_message ||
              msg.id ||
              msg.message_ref ||
              msg._id ||
              `msg-${index}-${Date.now()}`;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if (seenIds.has(baseId)) {
              console.log(`Skipping duplicate message: ${baseId}`);
              return;
            }
            seenIds.add(baseId);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ
            const isOutgoing = Boolean(
              msg.direction === "out" ||
                msg.sender?.id === "me" ||
                msg.fromMe ||
                msg.raw?.typeWebhook === "outgoingAPIMessageReceived"
            );

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            let text = msg.text || "";
            if (!text && msg.messageData) {
              text =
                msg.messageData?.textMessageData?.textMessage ||
                msg.messageData?.extendedTextMessageData?.text ||
                "";
            }

            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –∏ –µ—Å—Ç—å –º–µ–¥–∏–∞
            if (!text && msg.media) {
              text = getMediaText(msg.media.type, msg.media.name);
            }

            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            if (!text) {
              text = "[–°–æ–æ–±—â–µ–Ω–∏–µ]";
            }

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            let createdAt = Date.now();
            if (typeof msg.timestamp === "number") {
              createdAt = msg.timestamp * 1000;
            } else if (msg.timestamp) {
              const parsed = Date.parse(msg.timestamp);
              createdAt = isNaN(parsed) ? Date.now() : parsed;
            } else if (typeof msg.created_at === "number") {
              createdAt = msg.created_at * 1000;
            } else if (msg.created_at) {
              const parsed = Date.parse(msg.created_at);
              createdAt = isNaN(parsed) ? Date.now() : parsed;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const status = isOutgoing
              ? msg.status === "read"
                ? "read"
                : msg.status === "delivered"
                ? "delivered"
                : msg.status === "sent"
                ? "sent"
                : "sent"
              : undefined;

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            const message: Message = {
              id: baseId,
              chatId: decodedChatId,
              author: isOutgoing ? "me" : "them",
              text: text.trim(),
              time: fmtTime(createdAt),
              createdAt,
              status,
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if (msg.media) {
              message.media = {
                url: msg.media.url || "",
                type: (msg.media.type || "document") as
                  | "image"
                  | "video"
                  | "document"
                  | "audio",
                name: msg.media.name,
                size: msg.media.size,
                mime: msg.media.mime,
              };
            }

            mapped.push(message);
          } catch (msgError) {
            console.error("Error processing message:", msgError, msg);
          }
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        mapped.sort((a, b) => (a.createdAt ?? 0) - (b.createdAt ?? 0));

        console.log(`Successfully loaded ${mapped.length} messages`);
        setMessages(mapped);
      } catch (error) {
        console.error("Error loading messages:", error);

        // üîπ –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú –°–û–û–ë–©–ï–ù–ò–Ø –ü–†–ò –û–®–ò–ë–ö–ï - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
        // setMessages([]); // ‚Üê –≠–¢–£ –°–¢–†–û–ö–£ –£–ë–ò–†–ê–ï–ú

        if (!silent) {
          setError(
            error instanceof Error ? error.message : "Failed to load messages"
          );
        }
      } finally {
        if (!silent) setLoadingMessages(false);
      }
    },
    []
  ); // ‚úÖ useCallback –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // üîπ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ú–ï–î–ò–ê-–¢–ï–ö–°–¢–ê
  const getMediaText = (mediaType: string, fileName?: string) => {
    switch (mediaType?.toLowerCase()) {
      case "image":
        return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      case "video":
        return "üé• –í–∏–¥–µ–æ";
      case "audio":
        return "üéµ –ê—É–¥–∏–æ";
      case "document":
        return `üìÑ ${fileName || "–î–æ–∫—É–º–µ–Ω—Ç"}`;
      default:
        return "üìé –§–∞–π–ª";
    }
  };

  // üîπ –£–õ–£–ß–®–ï–ù–ù–´–ô WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  useEffect(() => {
    const handleWebSocketMessage = (message: any) => {
      console.log("Processing WebSocket message:", message);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (
        message.type === "new_message" ||
        message.event === "message" ||
        message.message
      ) {
        console.log(
          "New message received for chat:",
          message.chat_id || message.from
        );

        const messageChatId = message.chat_id || message.from;

        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        if (messageChatId === chatId) {
          console.log("Message is for current chat, updating UI immediately");

          setMessages((prev) => {
            const newMessage: Message = {
              id:
                message.id_message ||
                message.id ||
                `ws-${Date.now()}-${Math.random()}`,
              chatId: messageChatId,
              author: "them",
              text:
                message.text ||
                message.body ||
                message.content ||
                message.message ||
                "[–°–æ–æ–±—â–µ–Ω–∏–µ]",
              time: fmtTime(Date.now()),
              createdAt: Date.now(),
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (prev.some((m) => m.id === newMessage.id)) {
              console.log("Message already exists, skipping");
              return prev;
            }

            console.log("Adding new message to state:", newMessage);
            const updatedMessages = [...prev, newMessage].sort(
              (a, b) => (a.createdAt ?? 0) - (b.createdAt ?? 0)
            );

            // üîπ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
            setTimeout(() => {
              scrollToBottom();
            }, 50);

            return updatedMessages;
          });

          // üîπ –°–†–ê–ó–£ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          setTimeout(() => {
            loadChats(true);
          }, 100);
        } else {
          // üîπ –í–ê–ñ–ù–û: –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
          console.log("Message for other chat, refreshing chats list");
          setTimeout(() => {
            loadChats(true);
          }, 200);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
      if (
        message.type === "message_status" ||
        message.event === "message_ack" ||
        message.ack
      ) {
        console.log("Message status update:", message);
        setMessages((prev) =>
          prev.map((m) =>
            m.id === message.id_message ||
            m.id === message.temp_id ||
            m.id === message.id
              ? {
                  ...m,
                  status: getStatusFromAck(message.status || message.ack),
                }
              : m
          )
        );
      }

      // –í WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–æ–±–∞–≤—å—Ç–µ:
      if (message.type === "new_message" && message.media) {
        console.log("New media message received:", message);

        if (message.chat_id === chatId) {
          setMessages((prev) => {
            const newMessage: Message = {
              id: message.id_message || `ws-${Date.now()}`,
              chatId: message.chat_id,
              author: "them",
              text: getIncomingMediaText(
                message.media?.type,
                message.media?.name
              ),
              time: fmtTime(Date.now()),
              createdAt: Date.now(),
              media: message.media
                ? {
                    url: message.media.url,
                    type: message.media.type,
                    name: message.media.name,
                    size: message.media.size,
                    mime: message.media.mime,
                  }
                : undefined,
            };

            if (prev.some((m) => m.id === newMessage.id)) return prev;

            return [...prev, newMessage].sort(
              (a, b) => (a.createdAt ?? 0) - (b.createdAt ?? 0)
            );
          });

          setTimeout(scrollToBottom, 100);
        }
      }

      // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
      const getIncomingMediaText = (mediaType: string, fileName: string) => {
        switch (mediaType) {
          case "image":
            return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
          case "video":
            return "üé• –í–∏–¥–µ–æ";
          case "audio":
            return "üéµ –ê—É–¥–∏–æ";
          case "document":
            return `üìÑ ${fileName || "–î–æ–∫—É–º–µ–Ω—Ç"}`;
          default:
            return "üìé –§–∞–π–ª";
        }
      };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      if (
        (message.type === "message_sent" || message.event === "message_sent") &&
        message.temp_id
      ) {
        console.log("Message sent confirmation:", message);
        setMessages((prev) =>
          prev.map((m) =>
            m.id === message.temp_id
              ? {
                  ...m,
                  id: message.id_message || m.id,
                  status: "delivered",
                }
              : m
          )
        );
      }
    };

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    const getStatusFromAck = (ack: number) => {
      switch (ack) {
        case 1:
          return "sent";
        case 2:
          return "delivered";
        case 3:
          return "read";
        default:
          return "sent";
      }
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    onMessage(handleWebSocketMessage);

    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      offMessage(handleWebSocketMessage);
    };
  }, [chatId, onMessage, offMessage, loadChats]);

  // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —á–∞—Ç–∞
  const handleCreateChat = async (rawPhone: string) => {
    const phone = normalizePhone(rawPhone);
    console.log("Creating temp chat with phone:", phone);

    setHiddenPhones((prev) => (prev.includes(phone) ? prev : [...prev, phone]));

    const tempChatId = `temp:${phone}`;
    console.log("Temp chat ID:", tempChatId);

    router.push(`/${tempChatId}`);
    setMessages([]);
  };

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const handleSend = async () => {
    const text = draft.trim();
    if (!text || !chatId) {
      console.log("Cannot send: no text or chatId");
      return;
    }

    const now = Date.now();
    const tempMsgId = crypto.randomUUID();
    const optimistic: Message = {
      id: tempMsgId,
      chatId,
      author: "me",
      text,
      time: fmtTime(now),
      createdAt: now,
      status: "sent",
    };

    const stick = isNearBottom();
    setMessages((prev) =>
      [...prev, optimistic].sort(
        (a, b) => (a.createdAt ?? 0) - (b.createdAt ?? 0)
      )
    );
    setDraft("");
    if (stick) setTimeout(scrollToBottom, 40);

    try {
      let realChatId = chatId;

      // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π
      if (isTempChat && tempPhone) {
        console.log("=== CREATING REAL CHAT FROM TEMP ===");

        if (tempPhone.length !== 11) {
          const errorMsg = `–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞: ${tempPhone.length} —Ü–∏—Ñ—Ä. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 11.`;
          console.error(errorMsg);
          setMessages((prev) =>
            prev.map((m) =>
              m.id === tempMsgId ? { ...m, status: "failed" } : m
            )
          );
          alert(errorMsg);
          return;
        }

        const apiPhone = `${tempPhone}@c.us`;
        console.log("API phone:", apiPhone);

        console.log("Calling start chat API...");

        try {
          const start = await fetch("/api/whatsapp/chats/start", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ phone: apiPhone }),
          });

          console.log("Start chat API response status:", start.status);

          let startData;
          try {
            startData = await start.json();
          } catch (parseError) {
            console.error("Failed to parse start chat response:", parseError);
            const textResponse = await start.text();
            startData = {
              error: "Invalid JSON response",
              raw: textResponse,
              status: start.status,
            };
          }

          if (!start.ok || !startData?.chat_id) {
            let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç";
            if (startData?.error) errorMessage += `: ${startData.error}`;

            console.error("Failed to create chat:", errorMessage);
            setMessages((prev) =>
              prev.map((m) =>
                m.id === tempMsgId ? { ...m, status: "failed" } : m
              )
            );
            alert(errorMessage);
            return;
          }

          realChatId = String(startData.chat_id);
          console.log("Real chat created with ID:", realChatId);

          // üîπ –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
          setChats((prev) => [
            ...prev,
            {
              id: realChatId,
              chat_id: realChatId,
              is_group: false,
              name: tempPhone,
              phone: tempPhone,
              lastMessage: text,
              time: fmtTime(now),
              unread: 0,
              avatarFallback: tempPhone.slice(0, 2),
              avatarUrl: `https://api.dicebear.com/9.x/initials/svg?seed=${encodeURIComponent(
                tempPhone
              )}`,
              updatedAt: now,
            },
          ]);

          router.replace(`/${realChatId}`);
        } catch (networkError) {
          console.error("Network error creating chat:", networkError);
          setMessages((prev) =>
            prev.map((m) =>
              m.id === tempMsgId ? { ...m, status: "failed" } : m
            )
          );
          alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞");
          return;
        }
      }

      console.log("=== SENDING MESSAGE TO REAL CHAT ===");
      console.log("Real chat ID:", realChatId);
      console.log("WebSocket connected:", isConnected);

      // üîπ –ü–†–ò–û–†–ò–¢–ï–¢: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (isConnected) {
        console.log("Sending via WebSocket");

        // üîπ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è WebSocket
        const wsMessage = {
          action: "send_message", // –∏–ª–∏ "sendMessage" - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
          chat_id: realChatId,
          message: text,
          temp_id: tempMsgId,
          type: "text",
        };

        console.log("WebSocket message payload:", wsMessage);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
        sendMessage(wsMessage);

        // üîπ –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ä–∞–∑—É - –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        // setMessages((prev) =>
        //   prev.map((m) =>
        //     m.id === tempMsgId ? { ...m, status: "delivered" } : m
        //   )
        // );

        // –†–µ–∑–µ—Ä–≤: –µ—Å–ª–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º HTTP
        const fallbackTimeout = setTimeout(() => {
          console.log("WebSocket timeout, falling back to HTTP");
          sendViaHttp(realChatId, text, tempMsgId);
        }, 3000);

        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const cleanup = () => clearTimeout(fallbackTimeout);

        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        const handleSentConfirmation = (message: any) => {
          if (message.temp_id === tempMsgId || message.id_message) {
            console.log("Message sent confirmation received:", message);
            setMessages((prev) =>
              prev.map((m) =>
                m.id === tempMsgId
                  ? {
                      ...m,
                      id: message.id_message || m.id,
                      status: "delivered",
                    }
                  : m
              )
            );
            cleanup();
            offMessage(handleSentConfirmation);
          }
        };

        onMessage(handleSentConfirmation);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        setTimeout(() => {
          loadChats(true);
        }, 1000);
      } else {
        // üîπ –†–ï–ó–ï–†–í: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ HTTP –µ—Å–ª–∏ WebSocket –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
        console.log("WebSocket not connected, sending via HTTP");
        sendViaHttp(realChatId, text, tempMsgId);
      }
    } catch (error) {
      console.error("Send message error:", error);
      setMessages((prev) =>
        prev.map((m) => (m.id === tempMsgId ? { ...m, status: "failed" } : m))
      );
      alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ");
    }
  };

  // üîπ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–´–ë–û–†–ê –§–ê–ô–õ–ê
  // –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handleFileSelect –∏ handleSendMedia –≤ ChatPage

  // üîπ –£–ü–†–û–©–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileSelect = async (file: File) => {
    console.log("=== FILE SELECTED ===");
    console.log("File details:", {
      name: file.name,
      type: file.type,
      size: file.size,
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if (file.size > 50 * 1024 * 1024) {
      alert("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50MB)");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
    const allowedTypes = [
      "image/jpeg",
      "image/jpg",
      "image/png",
      "image/gif",
      "image/webp",
      "video/mp4",
      "video/avi",
      "video/mov",
      "audio/mpeg",
      "audio/mp3",
      "audio/wav",
      "audio/ogg",
      "application/pdf",
      "application/msword",
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      "text/plain",
    ];

    if (!allowedTypes.includes(file.type)) {
      alert("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞");
      return;
    }

    try {
      await handleSendMedia(file);
    } catch (error) {
      console.error("Failed to send media:", error);
      alert(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: " +
          (error instanceof Error ? error.message : "Unknown error")
      );
    }
  };

  // üîπ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
  const handleSendMedia = async (file: File) => {
    if (!chatId) {
      console.log("Cannot send media: no chatId");
      return;
    }

    const now = Date.now();
    const tempMsgId = crypto.randomUUID();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const getFileType = (
      mimeType: string
    ): "image" | "video" | "document" | "audio" => {
      if (mimeType.startsWith("image/")) return "image";
      if (mimeType.startsWith("video/")) return "video";
      if (mimeType.startsWith("audio/")) return "audio";
      return "document";
    };

    const fileType = getFileType(file.type);

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const optimistic: Message = {
      id: tempMsgId,
      chatId,
      author: "me",
      text: getMediaText(fileType, file.name),
      time: fmtTime(now),
      createdAt: now,
      status: "sent",
      media: {
        url: URL.createObjectURL(file),
        type: fileType,
        name: file.name,
        size: file.size,
        mime: file.type,
      },
    };

    const stick = isNearBottom();
    setMessages((prev) =>
      [...prev, optimistic].sort(
        (a, b) => (a.createdAt ?? 0) - (b.createdAt ?? 0)
      )
    );
    if (stick) setTimeout(scrollToBottom, 40);

    try {
      let realChatId = chatId;

      // üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
      if (isTempChat && tempPhone) {
        console.log("=== CREATING REAL CHAT FROM TEMP FOR MEDIA ===");

        if (tempPhone.length !== 11) {
          throw new Error(
            `–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞: ${tempPhone.length} —Ü–∏—Ñ—Ä. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 11.`
          );
        }

        const apiPhone = `${tempPhone}@c.us`;
        console.log("API phone for media:", apiPhone);

        const start = await fetch("/api/whatsapp/chats/start", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ phone: apiPhone }),
        });

        if (!start.ok) {
          const errorData = await start
            .json()
            .catch(() => ({ error: "Unknown error" }));
          throw new Error(errorData?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç");
        }

        const startData = await start.json();

        if (!startData?.chat_id) {
          throw new Error("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª chat_id");
        }

        realChatId = String(startData.chat_id);
        console.log("Real chat created for media with ID:", realChatId);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setChats((prev) => [
          {
            id: realChatId,
            chat_id: realChatId,
            is_group: false,
            name: tempPhone,
            phone: tempPhone,
            lastMessage: "üìé –ú–µ–¥–∏–∞",
            time: fmtTime(now),
            unread: 0,
            avatarFallback: tempPhone.slice(0, 2),
            avatarUrl: `https://api.dicebear.com/9.x/initials/svg?seed=${encodeURIComponent(
              tempPhone
            )}`,
            updatedAt: now,
          },
          ...prev,
        ]);

        router.replace(`/${realChatId}`);
      }

      console.log("=== SENDING FILE TO CHAT ===");
      console.log("Real chat ID:", realChatId);
      console.log("File:", file.name, file.type, file.size);

      // üîπ –°–û–ó–î–ê–ï–ú FormData
      const formData = new FormData();
      formData.append("file", file);
      formData.append("caption", file.name);

      console.log("Sending FormData to API...");

      // üîπ –û–¢–ü–†–ê–í–õ–Ø–ï–ú —á–µ—Ä–µ–∑ API
      const sendMediaRes = await fetch(
        `/api/whatsapp/chats/${encodeURIComponent(realChatId)}/send/media`,
        {
          method: "POST",
          body: formData,
          // –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º Content-Type - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º –¥–æ–±–∞–≤–∏—Ç —Å boundary
        }
      );

      console.log("Send media response status:", sendMediaRes.status);

      if (!sendMediaRes.ok) {
        const errorText = await sendMediaRes.text();
        console.error("Send media error response:", errorText);

        let errorData;
        try {
          errorData = JSON.parse(errorText);
        } catch {
          errorData = { error: errorText };
        }

        throw new Error(errorData?.error || `HTTP ${sendMediaRes.status}`);
      }

      const sendMediaData = await sendMediaRes.json();
      console.log("Media sent successfully:", sendMediaData);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      setMessages((prev) =>
        prev.map((m) =>
          m.id === tempMsgId
            ? {
                ...m,
                id: sendMediaData?.id_message || tempMsgId,
                status: "delivered",
                media: m.media
                  ? {
                      ...m.media,
                      url:
                        sendMediaData?.media_url ||
                        sendMediaData?.url ||
                        m.media.url,
                    }
                  : m.media,
              }
            : m
        )
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      setTimeout(() => {
        loadMessages(realChatId, true);
        loadChats(true);
      }, 1000);
    } catch (error) {
      console.error("Send media error:", error);

      // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ failed
      setMessages((prev) =>
        prev.map((m) => (m.id === tempMsgId ? { ...m, status: "failed" } : m))
      );

      alert(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: " +
          (error instanceof Error ? error.message : "Unknown error")
      );
    }
  };

  // üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –æ—Ç–ø—Ä–∞–≤–∫–∏
  const sendViaHttp = async (
    realChatId: string,
    text: string,
    tempMsgId: string
  ) => {
    try {
      const sendRes = await fetch(
        `/api/whatsapp/chats/${encodeURIComponent(realChatId)}/send`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ text }),
        }
      );

      let sendData;
      try {
        sendData = await sendRes.json();
      } catch (parseError) {
        console.error("Failed to parse send message response:", parseError);
        sendData = { error: "Invalid response" };
      }

      if (sendRes.ok) {
        console.log("Message sent successfully via HTTP");
        setMessages((prev) =>
          prev.map((m) =>
            m.id === tempMsgId
              ? {
                  ...m,
                  id: sendData?.id_message || tempMsgId,
                  status: "delivered",
                }
              : m
          )
        );
        setTimeout(() => {
          loadMessages(realChatId, true);
          loadChats(true);
        }, 1000);
      } else {
        console.error("Failed to send message via HTTP:", sendData);
        setMessages((prev) =>
          prev.map((m) => (m.id === tempMsgId ? { ...m, status: "failed" } : m))
        );
        alert(sendData?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
      }
    } catch (error) {
      console.error("HTTP send error:", error);
      setMessages((prev) =>
        prev.map((m) => (m.id === tempMsgId ? { ...m, status: "failed" } : m))
      );
    }
  };

  // Effects
  useEffect(() => {
    loadChats();
  }, [loadChats]);

  useEffect(() => {
    if (chatId) {
      console.log("Loading messages for chat:", chatId);
      loadMessages(chatId);
    }
  }, [chatId, loadMessages]);

  useEffect(() => {
    const pollInterval = setInterval(() => {
      if (document.visibilityState === "visible") {
        setIsPolling(true);
        loadChats(true).finally(() => setIsPolling(false));
        if (chatId && !isTempChat) {
          loadMessages(chatId, true);
        }
      }
    }, 300000);

    return () => clearInterval(pollInterval);
  }, [chatId, isTempChat, loadChats, loadMessages]);

  useEffect(() => {
    if (isNearBottom()) scrollToBottom();
  }, [messages]);

  const selectedChat = useMemo(
    () => chats.find((c) => c.id === chatId),
    [chats, chatId]
  );

  const visibleChats = useMemo(
    () =>
      chats.filter(
        (c) => !(hiddenPhones.includes(c.phone || "") && (c.unread ?? 0) === 0)
      ),
    [chats, hiddenPhones]
  );

  const filteredChats = useMemo(
    () =>
      visibleChats.filter(
        (c) =>
          c.name?.toLowerCase().includes(query.toLowerCase()) ||
          c.phone?.includes(query)
      ),
    [visibleChats, query]
  );

  const unhideCurrent = () => {
    const phone = isTempChat ? tempPhone : selectedChat?.phone;
    if (!phone) return;
    setHiddenPhones((prev) => prev.filter((p) => p !== phone));
  };

  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testWebSocketConnection = () => {
    console.log("=== WEBSOCKET TEST ===");
    console.log("Connected:", isConnected);

    // –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (isConnected && chatId && !isTempChat) {
      sendMessage({
        action: "ping",
        timestamp: Date.now(),
      });
    }
  };
  // –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ UI (–≤—Ä–µ–º–µ–Ω–Ω–æ)
  <Button
    variant="outline"
    size="sm"
    onClick={testWebSocketConnection}
    className="absolute top-2 right-2 z-50"
  >
    Test WS
  </Button>;

  // –í –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ ChatPage –¥–æ–±–∞–≤—å—Ç–µ
  useEffect(() => {
    console.log("=== WEBSOCKET STATUS ===");
    console.log("WebSocket connected:", isConnected);
    console.log("Current chatId:", chatId);
    console.log("Is temp chat:", isTempChat);
  }, [isConnected, chatId, isTempChat]);
  const isLoadingUI = loadingChats || loadingMessages;

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞
  const scrollToBottom = useCallback(() => {
    if (bottomRef.current) {
      bottomRef.current.scrollIntoView({
        behavior: "smooth",
        block: "end",
        inline: "nearest",
      });
    }
  }, []);

  // –ê–≤—Ç–æ-—Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    const timer = setTimeout(() => {
      if (isNearBottom()) {
        scrollToBottom();
      }
    }, 100);

    return () => clearTimeout(timer);
  }, [messages, scrollToBottom]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const forceRefresh = useCallback(() => {
    console.log("Force refreshing chats and messages");
    loadChats();
    if (chatId) {
      loadMessages(chatId);
    }
  }, [loadChats, loadMessages, chatId]);

  // –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–æ–±–∏–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä
  <Button
    variant="ghost"
    size="icon"
    onClick={forceRefresh}
    disabled={loadingChats}
  >
    <RefreshCw className={`h-4 w-4 ${loadingChats ? "animate-spin" : ""}`} />
  </Button>;

  return (
    <TooltipProvider>
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <div
        className={`fixed top-0 left-0 right-0 h-1 z-50 transition-all ${
          isConnected ? "bg-green-500" : "bg-red-500 animate-pulse"
        }`}
      />

      {isPolling && (
        <div className="fixed top-1 left-0 right-0 h-0.5 bg-blue-500/20 z-50" />
      )}

      {isLoadingUI && (
        <div className="fixed inset-x-0 top-2 h-[2px] bg-primary/30 animate-pulse z-50" />
      )}

      {/* –ú–æ–±–∏–ª—å–Ω—ã–π Sidebar */}
      <MobileSidebar
        open={mobileSidebarOpen}
        onOpenChange={setMobileSidebarOpen}
        query={query}
        setQuery={setQuery}
        chats={filteredChats}
        selectedId={chatId ?? undefined}
        setSelectedId={(id) => {
          console.log("Setting selected chat:", id);
          router.push(`/${id}`);
        }}
        onCreateChat={handleCreateChat}
      />

      <div className="flex h-[calc(100vh-2rem)] md:h-screen w-full bg-background text-foreground">
        {/* Desktop Sidebar - —Å–∫—Ä—ã—Ç –Ω–∞ –º–æ–±–∏–ª–∫–∞—Ö */}
        <aside className="hidden md:flex md:w-[360px] lg:w-[400px] flex-col border-r">
          {loadingChats ? (
            <div className="p-3 space-y-2">
              <div className="h-9 bg-muted rounded-md animate-pulse" />
              {Array.from({ length: 8 }).map((_, i) => (
                <div
                  key={i}
                  className="h-14 bg-muted/60 rounded-xl animate-pulse"
                />
              ))}
            </div>
          ) : (
            <Sidebar
              query={query}
              setQuery={setQuery}
              chats={filteredChats}
              selectedId={chatId ?? undefined}
              setSelectedId={(id) => {
                console.log("Setting selected chat:", id);
                router.push(`/${id}`);
              }}
              onCreateChat={handleCreateChat}
            />
          )}
        </aside>

        {/* Chat area */}
        <main className="flex-1 flex flex-col">
          {/* –ú–æ–±–∏–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä */}
          <div className="md:hidden border-b bg-background/95 backdrop-blur">
            <div className="flex items-center justify-between p-3">
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setMobileSidebarOpen(true)}
                className="md:hidden"
              >
                <Menu className="h-5 w-5" />
              </Button>

              <div className="flex-1 text-center">
                {selectedChat ? (
                  <div className="flex items-center justify-center gap-2">
                    <Avatar className="h-8 w-8">
                      <AvatarFallback>
                        {selectedChat.avatarFallback}
                      </AvatarFallback>
                    </Avatar>
                    <div>
                      <div className="font-medium text-sm">
                        {selectedChat.name}
                      </div>
                      <div className="text-xs text-muted-foreground">
                        {isConnected ? "online" : "offline"}
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="font-medium">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç</div>
                )}
              </div>

              <div className="w-9"> {/* Placeholder for balance */} </div>
            </div>
          </div>

          {/* –ë–∞–Ω–Ω–µ—Ä –ø—Ä–æ —Å–∫—Ä—ã—Ç—ã–π —á–∞—Ç */}
          {(isTempChat ||
            (selectedChat &&
              hiddenPhones.includes(selectedChat.phone || ""))) && (
            <div className="px-3 md:px-6 py-2 text-[12px] bg-muted text-muted-foreground border-b flex items-center gap-2">
              <span>
                –°–∫—Ä—ã—Ç—ã–π —á–∞—Ç —Å{" "}
                <b>{isTempChat ? tempPhone : selectedChat?.phone}</b> ‚Äî –Ω–µ
                –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å–ª–µ–≤–∞.
              </span>
              <Button
                variant="link"
                className="h-auto p-0 text-xs"
                onClick={unhideCurrent}
              >
                –ü–æ–∫–∞–∑–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ
              </Button>
            </div>
          )}

          {/* Messages */}
          {chatId ? (
            <ScrollArea
              className="flex-1"
              ref={(el) => {
                const vp = el?.querySelector(
                  "[data-radix-scroll-area-viewport]"
                ) as HTMLDivElement | null;
                scrollContainerRef.current = vp ?? null;
              }}
            >
              <div className="px-3 md:px-6 py-4 space-y-3">
                {loadingMessages ? (
                  <>
                    {Array.from({ length: 6 }).map((_, i) => (
                      <div
                        key={i}
                        className={`flex ${
                          i % 2 ? "justify-end" : "justify-start"
                        }`}
                      >
                        <div className="h-12 w-56 bg-muted rounded-2xl animate-pulse" />
                      </div>
                    ))}
                  </>
                ) : messages.length === 0 ? (
                  <div className="text-center text-muted-foreground py-8">
                    {isTempChat
                      ? "–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —á–∞—Ç –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
                      : "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"}
                  </div>
                ) : (
                  messages.map((m) => <MessageBubble key={m.id} msg={m} />)
                )}
                <div ref={bottomRef} />
              </div>
            </ScrollArea>
          ) : (
            <div className="flex-1 flex items-center justify-center p-4">
              <div className="text-center max-w-sm">
                <div className="text-lg font-semibold mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç</div>
                <p className="text-muted-foreground mb-4">
                  –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ, –≤—ã–±—Ä–∞–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–≤ –Ω–æ–≤—ã–π
                </p>
                <Button
                  onClick={() => setMobileSidebarOpen(true)}
                  className="w-full"
                >
                  <Menu className="h-4 w-4 mr-2" />
                  –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                </Button>
              </div>
            </div>
          )}

          {/* Composer */}
          {chatId && (
            <div className="sticky bottom-0 z-10 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-t">
              <Composer
                draft={draft}
                setDraft={setDraft}
                onSend={handleSend}
                onFileSelect={handleFileSelect} // üîπ –ò–ó–ú–ï–ù–ï–ù–û
                disabled={!chatId}
                placeholder={
                  chatId
                    ? "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    : "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π"
                }
              />
            </div>
          )}
        </main>
      </div>
    </TooltipProvider>
  );
}
