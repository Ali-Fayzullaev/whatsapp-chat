// src/app/api/whatsapp/chats/[chatId]/send/route.ts
import { NextRequest } from "next/server";
import { apiConfig } from "@/lib/api-config";

export async function POST(req: NextRequest, { params }: { params: Promise<{ chatId: string }> }) {
  const resolvedParams = await params;
  const { chatId } = resolvedParams;
  const { text, reply_to } = await req.json(); // üîπ –ò–ó–ú–ï–ù–ò–õ –ù–ê reply_to
  
  console.log("=== SEND MESSAGE API ===");
  console.log("Chat ID:", chatId);
  console.log("Message text:", text);
  console.log("Reply to:", reply_to); // üîπ –î–û–ë–ê–í–ò–õ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
  
  if (!text) {
    return Response.json({ error: "–¢–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }, { status: 400 });
  }

  try {
    const decodedId = decodeURIComponent(chatId);
    
    const url = `${apiConfig.getBaseUrl()}/api/chats/${decodedId}/send/text`;
    console.log("External API URL:", url);

    // üîπ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –í–ù–ï–®–ù–ï–ì–û API
    const payload: any = {
      text: text
    };

    // üîπ –ü–†–ê–í–ò–õ–¨–ù–û –ü–ï–†–ï–î–ê–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û–ë –û–¢–í–ï–¢–ï
    if (reply_to?.message_id) {
      payload.replyToMessageId = reply_to.message_id; // üîπ –ò–õ–ò –¢–û –ü–û–õ–ï, –ö–û–¢–û–†–û–ï –ñ–î–ï–¢ –í–ê–® –ë–≠–ö–ï–ù–î
    }

    console.log("Sending payload to external API:", payload);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    const authHeader = req.headers.get('authorization');

    const res = await fetch(url, {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        ...(authHeader && { 'Authorization': authHeader }),
      },
      body: JSON.stringify(payload),
    });

    console.log("External API status:", res.status);
    
    let data;
    try {
      data = await res.json();
    } catch (parseError) {
      console.error("Failed to parse API response:", parseError);
      const textResponse = await res.text();
      data = { 
        error: "Invalid JSON response", 
        raw: textResponse,
        status: res.status 
      };
    }
    
    if (!res.ok) {
      console.error("External API error:", data);
      return Response.json({ 
        error: data.error || "–û—à–∏–±–∫–∞ API",
        details: data,
        status: res.status
      }, { status: res.status });
    }
    
    console.log("Message sent successfully:", data);
    return Response.json(data);
    
  } catch (error) {
    console.error("Send message network error:", error);
    return Response.json({ 
      error: "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏",
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}