// src/app/test-reply/page.tsx
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

export default function TestReplyPage() {
  const [testResults, setTestResults] = useState<string[]>([]);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setTestResults(prev => [...prev, `[${timestamp}] ${message}`]);
  };

  const clearLogs = () => {
    setTestResults([]);
  };

  const testReplyButtons = () => {
    addLog("üß™ –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞...");
    
    // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ dropdown –º–µ–Ω—é
    const dropdownReplyButtons = document.querySelectorAll('[role="menuitem"]');
    const replyButtons = Array.from(dropdownReplyButtons).filter(btn => 
      btn.textContent?.includes('–û—Ç–≤–µ—Ç–∏—Ç—å')
    );
    
    addLog(`üì± –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ "–û—Ç–≤–µ—Ç–∏—Ç—å" –≤ dropdown: ${replyButtons.length}`);
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å handleReply
    const allButtons = document.querySelectorAll('button, div[role="menuitem"]');
    let replyHandlerCount = 0;
    
    allButtons.forEach(button => {
      const events = (button as any)._reactInternalFiber || (button as any).__reactInternalInstance;
      if (events && button.textContent?.includes('–û—Ç–≤–µ—Ç–∏—Ç—å')) {
        replyHandlerCount++;
        addLog(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º "–û—Ç–≤–µ—Ç–∏—Ç—å": ${button.tagName}`);
      }
    });
    
    addLog(`üîç –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º "–û—Ç–≤–µ—Ç–∏—Ç—å": ${replyHandlerCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
    const chatContainer = document.querySelector('[class*="scroll"]');
    if (chatContainer) {
      addLog("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω");
    } else {
      addLog("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, —á–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç");
    }
    
    return replyButtons.length;
  };

  const simulateReplyClick = () => {
    addLog("üñ±Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–≤–µ—Ç–∞...");
    
    // –ù–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const messageElements = document.querySelectorAll('[class*="group"]');
    if (messageElements.length === 0) {
      addLog("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return;
    }
    
    const firstMessage = messageElements[0] as HTMLElement;
    addLog(`üì± –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageElements.length}`);
    
    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–∑–≤–∞—Ç—å hover
    const mouseEnterEvent = new MouseEvent('mouseenter', {
      bubbles: true,
      cancelable: true,
      view: window
    });
    
    firstMessage.dispatchEvent(mouseEnterEvent);
    addLog("üñ±Ô∏è Mouseenter event –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
    
    // –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–∏—Å–∫–∞—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
    setTimeout(() => {
      const menuButton = firstMessage.querySelector('button[role="button"]');
      if (menuButton) {
        addLog("‚úÖ –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–∏–∫–∞–µ–º...");
        (menuButton as HTMLElement).click();
        
        // –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∏ –∫–ª–∏–∫–Ω—É—Ç—å "–û—Ç–≤–µ—Ç–∏—Ç—å"
        setTimeout(() => {
          const replyMenuItem = document.querySelector('[role="menuitem"]');
          if (replyMenuItem && replyMenuItem.textContent?.includes('–û—Ç–≤–µ—Ç–∏—Ç—å')) {
            addLog("‚úÖ –ü—É–Ω–∫—Ç –º–µ–Ω—é '–û—Ç–≤–µ—Ç–∏—Ç—å' –Ω–∞–π–¥–µ–Ω, –∫–ª–∏–∫–∞–µ–º...");
            (replyMenuItem as HTMLElement).click();
          } else {
            addLog("‚ùå –ü—É–Ω–∫—Ç –º–µ–Ω—é '–û—Ç–≤–µ—Ç–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω");
          }
        }, 100);
      } else {
        addLog("‚ùå –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      }
    }, 100);
  };

  const checkReplyState = () => {
    addLog("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...");
    
    // –ò—â–µ–º preview –æ—Ç–≤–µ—Ç–∞
    const replyPreview = document.querySelector('[class*="bg-blue-50"]');
    if (replyPreview) {
      addLog("‚úÖ Preview –æ—Ç–≤–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω!");
      addLog(`üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ preview: ${replyPreview.textContent?.slice(0, 100)}...`);
    } else {
      addLog("‚ùå Preview –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // –ò—â–µ–º Composer
    const composer = document.querySelector('textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]');
    if (composer) {
      addLog("‚úÖ Composer –Ω–∞–π–¥–µ–Ω");
    } else {
      addLog("‚ùå Composer –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  };

  const runFullTest = () => {
    clearLogs();
    addLog("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–≤–µ—Ç–æ–≤...");
    
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–Ω–æ–ø–∫–∏
    const buttonCount = testReplyButtons();
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setTimeout(() => {
      checkReplyState();
      
      // –®–∞–≥ 3: –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫
      if (buttonCount > 0) {
        setTimeout(() => {
          simulateReplyClick();
          
          // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          setTimeout(() => {
            checkReplyState();
            addLog("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!");
          }, 500);
        }, 200);
      } else {
        addLog("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∫–ª–∏–∫–∞");
      }
    }, 100);
  };

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <Card>
        <CardHeader>
          <CardTitle>üõ†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤</CardTitle>
          <CardDescription>
            –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2 flex-wrap">
            <Button onClick={testReplyButtons} variant="outline">
              üîç –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞
            </Button>
            <Button onClick={simulateReplyClick} variant="outline">
              üñ±Ô∏è –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫
            </Button>
            <Button onClick={checkReplyState} variant="outline">
              üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            </Button>
            <Button onClick={runFullTest} className="bg-blue-600 hover:bg-blue-700">
              üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
            </Button>
            <Button onClick={clearLogs} variant="ghost">
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
            </Button>
          </div>

          <div className="mt-6">
            <h4 className="font-medium mb-2 flex items-center gap-2">
              üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
              {testResults.length > 0 && (
                <Badge variant="secondary">{testResults.length} –∑–∞–ø–∏—Å–µ–π</Badge>
              )}
            </h4>
            <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-4 h-64 overflow-y-auto">
              {testResults.length === 0 ? (
                <div className="text-gray-500 text-center py-8">
                  –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                </div>
              ) : (
                <div className="space-y-1 font-mono text-sm">
                  {testResults.map((result, index) => (
                    <div
                      key={index}
                      className={`p-2 rounded ${
                        result.includes('‚úÖ') ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300' :
                        result.includes('‚ùå') ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300' :
                        result.includes('‚ö†Ô∏è') ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300' :
                        'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300'
                      }`}
                    >
                      {result}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
            <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-2">
              üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
            </h4>
            <ol className="text-sm text-blue-700 dark:text-blue-300 space-y-1 list-decimal list-inside">
              <li>–û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–æ—Å–µ–¥–Ω–µ–π –≤–∫–ª–∞–¥–∫–µ</li>
              <li>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç"</li>
              <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –≤—Å–µ —à–∞–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å ‚úÖ</li>
              <li>–ï—Å–ª–∏ –µ—Å—Ç—å ‚ùå - –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ</li>
            </ol>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}