// src/components/AITestPanel.tsx
"use client";
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useAI } from '@/hooks/useAI';
import { useWhatsAppAPI } from '@/hooks/useWhatsAppAPI';

interface AITestPanelProps {
  chatId: string;
  onClose: () => void;
}

export function AITestPanel({ chatId, onClose }: AITestPanelProps) {
  const [testMessage, setTestMessage] = useState('–ï—Å—Ç—å —Å–∫–∏–¥–∫–∏ –Ω–∞ Samsung?');
  const [aiResponse, setAiResponse] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const { aiEnabled, getAIResponse, toggleAI } = useAI();
  const { sendMessage } = useWhatsAppAPI();

  const testAI = async () => {
    setIsLoading(true);
    setAiResponse(null);

    try {
      console.log('üß™ Testing AI with message:', testMessage);
      
      const response = await getAIResponse(testMessage, chatId, []);
      
      console.log('üß™ AI Test Response:', response);
      setAiResponse(response);

    } catch (error) {
      console.error('üß™ AI Test Error:', error);
      setAiResponse({ 
        error: error instanceof Error ? error.message : 'Unknown error',
        success: false 
      });
    } finally {
      setIsLoading(false);
    }
  };

  const testFullFlow = async () => {
    setIsLoading(true);
    
    try {
      console.log('üß™ Testing full AI flow...');
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const mockIncomingMessage = {
        id: 'test-' + Date.now(),
        chatId,
        author: 'them' as const,
        text: testMessage,
        time: new Date().toLocaleTimeString(),
        createdAt: Date.now(),
      };

      console.log('üß™ Mock message created:', mockIncomingMessage);

      const response = await getAIResponse(testMessage, chatId, [mockIncomingMessage]);
      
      if (response?.shouldReply) {
        console.log('üß™ ‚úÖ AI would reply with:', response.response);
      } else {
        console.log('üß™ ‚ùå AI decided not to reply');
      }

      setAiResponse({
        ...response,
        testMode: true,
        mockMessage: mockIncomingMessage
      });

    } catch (error) {
      console.error('üß™ Full flow test error:', error);
      setAiResponse({ 
        error: error instanceof Error ? error.message : 'Unknown error',
        success: false 
      });
    } finally {
      setIsLoading(false);
    }
  };

  const sendAIResponse = async () => {
    if (!aiResponse?.response || !aiResponse?.shouldReply) {
      console.log('üö´ No AI response to send or AI decided not to reply');
      return;
    }

    setIsSending(true);
    try {
      console.log('üì§ Sending AI response to WhatsApp:', aiResponse.response);
      
      const result = await sendMessage(chatId, aiResponse.response);
      
      if (result.success) {
        console.log('‚úÖ AI response sent successfully!');
        setAiResponse({
          ...aiResponse,
          sent: true,
          sentAt: new Date().toISOString()
        });
      } else {
        console.error('‚ùå Failed to send AI response:', result.error);
        setAiResponse({
          ...aiResponse,
          sendError: result.error
        });
      }
    } catch (error) {
      console.error('‚ùå Error sending AI response:', error);
      setAiResponse({
        ...aiResponse,
        sendError: error instanceof Error ? error.message : 'Unknown error'
      });
    } finally {
      setIsSending(false);
    }
  };

  return (
    <Card className="fixed top-4 right-4 w-96 z-50 shadow-lg bg-white">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          üß™ AI Test Panel
          <Button variant="ghost" size="sm" onClick={onClose}>‚úï</Button>
        </CardTitle>
        <CardDescription>
          –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ AI –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* AI Status */}
        <div className="flex items-center justify-between p-2 bg-gray-50 rounded">
          <span className="text-sm">AI Status:</span>
          <div className="flex items-center gap-2">
            <span className={`text-sm ${aiEnabled ? 'text-green-600' : 'text-red-600'}`}>
              {aiEnabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}
            </span>
            <Button size="sm" onClick={toggleAI}>
              {aiEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'}
            </Button>
          </div>
        </div>

        {/* Test Message Input */}
        <div className="space-y-2">
          <label className="text-sm font-medium">–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</label>
          <Input
            value={testMessage}
            onChange={(e) => setTestMessage(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI"
          />
        </div>

        {/* Test Buttons */}
        <div className="flex gap-2">
          <Button 
            onClick={testAI}
            disabled={isLoading || !aiEnabled}
            className="flex-1"
          >
            {isLoading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : 'ü§ñ –¢–µ—Å—Ç AI'}
          </Button>
          <Button 
            onClick={testFullFlow}
            disabled={isLoading || !aiEnabled}
            variant="secondary"
            className="flex-1"
          >
            {isLoading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : 'üîÑ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç'}
          </Button>
        </div>

        {/* Send AI Response Button */}
        {aiResponse?.response && aiResponse?.shouldReply && !aiResponse?.sent && (
          <Button 
            onClick={sendAIResponse}
            disabled={isSending}
            className="w-full bg-green-600 hover:bg-green-700 text-white"
          >
            {isSending ? 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç AI –≤ WhatsApp'}
          </Button>
        )}

        {/* Results */}
        {aiResponse && (
          <div className="space-y-2">
            <div className="text-sm font-medium">–†–µ–∑—É–ª—å—Ç–∞—Ç:</div>
            <div className="bg-gray-50 p-3 rounded text-sm">
              {aiResponse.error ? (
                <div className="text-red-600">
                  ‚ùå –û—à–∏–±–∫–∞: {aiResponse.error}
                </div>
              ) : (
                <div className="space-y-2">
                  <div><strong>–ù–∞–º–µ—Ä–µ–Ω–∏–µ:</strong> {aiResponse.intent}</div>
                  <div><strong>–û—Ç–≤–µ—Ç:</strong> "{aiResponse.response}"</div>
                  <div><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> {(aiResponse.confidence * 100).toFixed(1)}%</div>
                  <div><strong>–û—Ç–≤–µ—á–∞—Ç—å:</strong> {aiResponse.shouldReply ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</div>
                  <div><strong>–°—Ä–æ—á–Ω–æ—Å—Ç—å:</strong> {aiResponse.urgency}</div>
                  {aiResponse.sent && (
                    <div className="mt-2 p-2 bg-green-50 rounded">
                      <div className="text-green-800 font-medium">‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {new Date(aiResponse.sentAt).toLocaleTimeString()}</div>
                    </div>
                  )}
                  {aiResponse.sendError && (
                    <div className="mt-2 p-2 bg-red-50 rounded">
                      <div className="text-red-800 font-medium">‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {aiResponse.sendError}</div>
                    </div>
                  )}
                  {aiResponse.testMode && (
                    <div className="mt-2 p-2 bg-blue-50 rounded">
                      <div className="text-blue-800 font-medium">üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω</div>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        )}

        {/* Debug Info */}
        <div className="text-xs text-gray-500">
          Chat ID: {chatId}
        </div>
      </CardContent>
    </Card>
  );
}