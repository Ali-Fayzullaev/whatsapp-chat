// src/components/AuthTester.tsx
"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Loader2, CheckCircle, XCircle, Key, User, Lock } from 'lucide-react';
import { useAuth } from '@/providers/AuthProvider';
import { authAPI } from '@/lib/auth-api';
import { apiConfig } from '@/lib/api-config';

export function AuthTester() {
  const { user, isAuthenticated, logout } = useAuth();
  const [testResults, setTestResults] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  
  const [testCredentials, setTestCredentials] = useState({
    username: 'admin',
    password: 'admin123',
    full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    user_id: '12'
  });

  const addLog = (message: string, type: 'info' | 'success' | 'error' = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    const emoji = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è';
    setTestResults(prev => [...prev, `[${timestamp}] ${emoji} ${message}`]);
  };

  const clearLogs = () => {
    setTestResults([]);
  };

  const testTokenValidation = async () => {
    addLog('–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞...');
    setIsLoading(true);
    
    try {
      const isValid = await authAPI.validateToken();
      addLog(`–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞: ${isValid ? '—É—Å–ø–µ—à–Ω–∞' : '–Ω–µ —É–¥–∞–ª–∞—Å—å'}`, isValid ? 'success' : 'error');
      
      if (isValid) {
        const currentUser = await authAPI.getCurrentUser();
        addLog(`–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${currentUser.username} (${currentUser.full_name})`, 'success');
      }
    } catch (error) {
      addLog(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
    } finally {
      setIsLoading(false);
    }
  };

  const testLogin = async () => {
    addLog('–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    setIsLoading(true);
    
    try {
      const response = await authAPI.login(testCredentials);
      addLog('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success');
      addLog(`–ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω —Ç–∏–ø–∞: ${response.token_type}`, 'info');
      addLog('–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ApiConfig', 'info');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      apiConfig.setAccessToken(response.access_token);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const user = await authAPI.getCurrentUser();
      addLog(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username} (ID: ${user.user_id})`, 'success');
      
    } catch (error) {
      addLog(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
    } finally {
      setIsLoading(false);
    }
  };

  const testLogout = async () => {
    addLog('–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
    setIsLoading(true);
    
    try {
      await logout();
      addLog('–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
    } catch (error) {
      addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
    } finally {
      setIsLoading(false);
    }
  };

  const testCurrentUser = async () => {
    addLog('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
    setIsLoading(true);
    
    try {
      const currentUser = await authAPI.getCurrentUser();
      addLog(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${currentUser.username}`, 'success');
      addLog(`–ü–æ–ª–Ω–æ–µ –∏–º—è: ${currentUser.full_name}`, 'info');
      addLog(`ID: ${currentUser.user_id}`, 'info');
    } catch (error) {
      addLog(`–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full max-w-4xl mx-auto space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Key className="h-5 w-5 text-green-600" />
            üîë –¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          </CardTitle>
          <CardDescription>
            –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card className="p-4">
              <div className="flex items-center gap-2">
                {isAuthenticated ? (
                  <CheckCircle className="h-4 w-4 text-green-500" />
                ) : (
                  <XCircle className="h-4 w-4 text-red-500" />
                )}
                <span className="font-medium">–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</span>
              </div>
              <Badge variant={isAuthenticated ? "default" : "destructive"} className="mt-2">
                {isAuthenticated ? '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}
              </Badge>
            </Card>
            
            <Card className="p-4">
              <div className="flex items-center gap-2">
                <User className="h-4 w-4 text-blue-500" />
                <span className="font-medium">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>
              </div>
              <div className="mt-2 text-sm">
                {user ? `${user.username} (${user.full_name})` : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
              </div>
            </Card>
            
            <Card className="p-4">
              <div className="flex items-center gap-2">
                <Lock className="h-4 w-4 text-purple-500" />
                <span className="font-medium">–¢–æ–∫–µ–Ω</span>
              </div>
              <div className="mt-2 text-sm">
                {apiConfig.getAccessToken() ? '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
              </div>
            </Card>
          </div>

          {/* –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-3">
              <Label>–¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</Label>
              <div className="grid grid-cols-2 gap-2">
                <Input
                  placeholder="Username"
                  value={testCredentials.username}
                  onChange={(e) => setTestCredentials(prev => ({ ...prev, username: e.target.value }))}
                />
                <Input
                  placeholder="Password"
                  type="password"
                  value={testCredentials.password}
                  onChange={(e) => setTestCredentials(prev => ({ ...prev, password: e.target.value }))}
                />
                <Input
                  placeholder="Full Name"
                  value={testCredentials.full_name}
                  onChange={(e) => setTestCredentials(prev => ({ ...prev, full_name: e.target.value }))}
                />
                <Input
                  placeholder="User ID"
                  value={testCredentials.user_id}
                  onChange={(e) => setTestCredentials(prev => ({ ...prev, user_id: e.target.value }))}
                />
              </div>
            </div>
            
            {/* –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <div className="space-y-3">
              <Label>–¢–µ—Å—Ç—ã API</Label>
              <div className="grid grid-cols-2 gap-2">
                <Button 
                  onClick={testLogin} 
                  disabled={isLoading}
                  size="sm"
                >
                  {isLoading ? <Loader2 className="h-3 w-3 animate-spin mr-1" /> : null}
                  –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞
                </Button>
                <Button 
                  onClick={testCurrentUser} 
                  disabled={isLoading}
                  variant="outline"
                  size="sm"
                >
                  –ò–Ω—Ñ–æ –æ —é–∑–µ—Ä–µ
                </Button>
                <Button 
                  onClick={testTokenValidation} 
                  disabled={isLoading}
                  variant="outline"
                  size="sm"
                >
                  –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
                </Button>
                <Button 
                  onClick={testLogout} 
                  disabled={isLoading}
                  variant="destructive"
                  size="sm"
                >
                  –¢–µ—Å—Ç logout
                </Button>
              </div>
            </div>
          </div>

          <div className="flex justify-between">
            <Button onClick={clearLogs} variant="outline" size="sm">
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
            </Button>
          </div>

          {/* –õ–æ–≥–∏ */}
          {testResults.length > 0 && (
            <div className="border rounded-lg p-4 bg-gray-50 dark:bg-gray-900">
              <h4 className="font-medium mb-3">üìä –õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h4>
              <div className="space-y-1 max-h-60 overflow-y-auto">
                {testResults.map((result, index) => (
                  <div key={index} className="text-xs font-mono bg-white dark:bg-gray-800 p-2 rounded border">
                    {result}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
          <Alert>
            <AlertDescription>
              <div className="space-y-2">
                <p className="font-medium">üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:</p>
                <ul className="list-disc list-inside space-y-1 text-sm">
                  <li><strong>–¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞:</strong> –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</li>
                  <li><strong>–ò–Ω—Ñ–æ –æ —é–∑–µ—Ä–µ:</strong> –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API</li>
                  <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞:</strong> –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞</li>
                  <li><strong>–¢–µ—Å—Ç logout:</strong> –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ –æ—á–∏—â–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã</li>
                </ul>
                <p className="text-sm text-gray-600 dark:text-gray-400 mt-3">
                  üîß –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É <code>socket.eldor.kz</code>
                </p>
              </div>
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    </div>
  );
}