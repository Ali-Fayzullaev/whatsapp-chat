// src/components/ReplyTester.tsx
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

export function ReplyTester() {
  const [testResults, setTestResults] = useState<string[]>([]);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setTestResults(prev => [...prev, `[${timestamp}] ${message}`]);
  };

  const clearLogs = () => {
    setTestResults([]);
  };

  const testReplyFeature = () => {
    addLog("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    const messages = document.querySelectorAll('[data-message-id]');
    addLog(`üì± –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`);
    
    if (messages.length === 0) {
      addLog("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞
    const replyButtons = document.querySelectorAll('[title="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"]');
    addLog(`üîò –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –æ—Ç–≤–µ—Ç–∞: ${replyButtons.length}`);
    
    if (replyButtons.length === 0) {
      addLog("‚ùå –ö–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º composer
    const composer = document.querySelector('textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]');
    addLog(`üìù Composer –Ω–∞–π–¥–µ–Ω: ${composer ? '‚úÖ' : '‚ùå'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const replyBanner = document.querySelector('[class*="bg-blue-50"]');
    addLog(`üí¨ –ë–∞–Ω–Ω–µ—Ä –æ—Ç–≤–µ—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω: ${replyBanner ? '‚úÖ' : '‚ùå'}`);

    addLog("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç–∞ —Ä—è–¥–æ–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.");
  };

  const simulateHover = () => {
    addLog("üñ±Ô∏è –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...");
    
    const firstMessage = document.querySelector('.group');
    if (firstMessage) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å hover
      firstMessage.classList.add('hover');
      setTimeout(() => {
        firstMessage.classList.remove('hover');
        addLog("üì± Hover —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∏ —É–±—Ä–∞–Ω");
      }, 3000);
    } else {
      addLog("‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>üß™ –¢–µ—Å—Ç–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤</CardTitle>
        <CardDescription>
          –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex gap-2 flex-wrap">
          <Button onClick={testReplyFeature} variant="default">
            üîç –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
          </Button>
          <Button onClick={simulateHover} variant="outline">
            üñ±Ô∏è –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å hover
          </Button>
          <Button onClick={clearLogs} variant="outline">
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
          </Button>
        </div>

        <div className="space-y-2">
          <h3 className="font-semibold flex items-center gap-2">
            üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
          </h3>
          <div className="text-sm space-y-1">
            <p>1. <Badge variant="outline">–û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç</Badge> —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏</p>
            <p>2. <Badge variant="outline">–ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä</Badge> –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</p>
            <p>3. <Badge variant="outline">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç–∞</Badge> (–∏–∫–æ–Ω–∫–∞ —Å—Ç—Ä–µ–ª–∫–∏)</p>
            <p>4. <Badge variant="outline">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ</Badge> –ø–æ—è–≤–ª–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –≤–Ω–∏–∑—É</p>
            <p>5. <Badge variant="outline">–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç</Badge> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ</p>
          </div>
        </div>

        {testResults.length > 0 && (
          <div className="border rounded-lg p-3 bg-gray-50 dark:bg-gray-900">
            <h4 className="font-medium mb-2">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h4>
            <div className="text-sm font-mono space-y-1 max-h-60 overflow-y-auto">
              {testResults.map((result, index) => (
                <div key={index} className="text-xs">
                  {result}
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
          <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-2">
            üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
          </h4>
          <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
            <li>‚Ä¢ –ö–Ω–æ–ø–∫–∏ –Ω–µ –≤–∏–¥–Ω—ã - –Ω–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</li>
            <li>‚Ä¢ –ö–ª–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)</li>
            <li>‚Ä¢ –ë–∞–Ω–Ω–µ—Ä –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ replyingTo</li>
            <li>‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
}