// src/components/WebSocketDebug.tsx
"use client";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Copy, ExternalLink } from "lucide-react";
import { apiConfig } from "@/lib/api-config";

export function WebSocketDebug() {
  const [status, setStatus] = useState<string>("–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ");
  const [logs, setLogs] = useState<string[]>([]);
  const [wsUrl, setWsUrl] = useState<string>("");
  const [diagnosticInfo, setDiagnosticInfo] = useState<any>(null);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, `${timestamp}: ${message}`]);
  };

  const copyDiagnosticInfo = () => {
    const info = {
      timestamp: new Date().toISOString(),
      wsUrl: wsUrl,
      userAgent: navigator.userAgent,
      status: status,
      logs: logs,
      diagnosticInfo: diagnosticInfo
    };
    navigator.clipboard.writeText(JSON.stringify(info, null, 2));
    addLog("üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞");
  };

  const testWebSocket = async () => {
    setStatus("–ü—Ä–æ–≤–µ—Ä—è—é...");
    setLogs([]);
    addLog("üöÄ –ù–∞—á–∏–Ω–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É WebSocket");

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
    try {
      const tokenInfo = apiConfig.getTokenInfo();
      addLog(`üîë –¢–æ–∫–µ–Ω: ${tokenInfo.masked}`);
      addLog(`‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç: ${tokenInfo.isExpired ? '–î–ê' : '–ù–ï–¢'}`);
      
      if (tokenInfo.payload) {
        addLog(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${tokenInfo.payload.full_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      }
    } catch (e) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${e}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
    addLog("üåê –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API...");
    try {
      const testResponse = await fetch('/api/whatsapp/chats');
      addLog(`API —Ç–µ—Å—Ç: ${testResponse.ok ? '‚úÖ OK' : '‚ùå FAILED'} (${testResponse.status})`);
    } catch (e) {
      addLog(`‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${e}`);
    }

    const currentWsUrl = apiConfig.getWebSocketUrlWithToken();
    setWsUrl(currentWsUrl);
    addLog(`üîó WebSocket URL: ${currentWsUrl.replace(/token=[^&]+/, 'token=***')}`);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    const diagnostic = {
      baseUrl: apiConfig.getBaseUrl(),
      websocketSupported: 'WebSocket' in window,
      protocol: window.location.protocol,
      host: window.location.host,
      userAgent: navigator.userAgent.substring(0, 100) + '...'
    };
    setDiagnosticInfo(diagnostic);
    addLog(`üîß Browser: ${diagnostic.websocketSupported ? '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç WS' : '–ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç WS'}`);

    try {
      const ws = new WebSocket(currentWsUrl);
      
      ws.onopen = () => {
        addLog("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!");
        setStatus("–ü–æ–¥–∫–ª—é—á–µ–Ω");
        ws.close();
      };

      ws.onerror = (error) => {
        console.error('WebSocket error details:', error);
        addLog(`‚ùå –û—à–∏–±–∫–∞ WebSocket: ${JSON.stringify(error)}`);
        setStatus("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
      };

      ws.onclose = (event) => {
        const closeReasons: Record<number, string> = {
          1000: "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ",
          1001: "–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –æ—Ç–∫–ª—é—á–∏–ª–∞—Å—å",
          1002: "–û—à–∏–±–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞",
          1003: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ",
          1005: "–ö–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω",
          1006: "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é/—Å–µ—Ä–≤–µ—Ä–æ–º)",
          1007: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ",
          1008: "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏",
          1009: "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
          1010: "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ",
          1011: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
          1012: "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
          1013: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        };
        
        const reason = closeReasons[event.code] || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ (–∫–æ–¥ ${event.code})`;
        addLog(`üîå WebSocket –∑–∞–∫—Ä—ã—Ç: ${reason}`);
        addLog(`üìä –î–µ—Ç–∞–ª–∏: –∫–æ–¥=${event.code}, —á–∏—Å—Ç–æ–µ=${event.wasClean}, –ø—Ä–∏—á–∏–Ω–∞="${event.reason}"`);
        
        if (event.code === 1006) {
          addLog("üí° –ö–æ–¥ 1006 –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
          addLog("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: 1) –ó–∞–ø—É—â–µ–Ω –ª–∏ WebSocket —Å–µ—Ä–≤–µ—Ä 2) –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ URL 3) –ï—Å—Ç—å –ª–∏ —Å–µ—Ç–µ–≤—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
        }
        
        if (event.code !== 1000) {
          setStatus(`–û—à–∏–±–∫–∞: ${reason}`);
        }
      };

      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
      setTimeout(() => {
        if (ws.readyState === WebSocket.CONNECTING) {
          addLog("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
          ws.close();
          setStatus("–¢–∞–π–º–∞—É—Ç");
        }
      }, 10000);

    } catch (error) {
      addLog(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WebSocket: ${error}`);
      setStatus("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è");
    }
  };

  return (
    <div className="p-4 border rounded-lg bg-gray-50 dark:bg-gray-900">
      <div className="flex items-center gap-2 mb-3">
        <h3 className="font-medium">WebSocket –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</h3>
        <Badge variant={status === "–ü–æ–¥–∫–ª—é—á–µ–Ω" ? "default" : "destructive"}>
          {status}
        </Badge>
      </div>
      
      <div className="flex gap-2 mb-3">
        <Button onClick={testWebSocket}>
          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        </Button>
        
        {logs.length > 0 && (
          <Button variant="outline" size="sm" onClick={copyDiagnosticInfo}>
            <Copy className="h-3 w-3 mr-1" />
            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
          </Button>
        )}
        
        <Button 
          variant="outline" 
          size="sm" 
          onClick={() => window.open('https://socket.eldor.kz', '_blank')}
        >
          <ExternalLink className="h-3 w-3 mr-1" />
          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
        </Button>
      </div>

      {logs.length > 0 && (
        <div className="text-xs bg-black text-green-400 p-2 rounded font-mono max-h-48 overflow-y-auto">
          {logs.map((log, i) => (
            <div key={i} className={log.includes('‚ùå') ? 'text-red-400' : log.includes('‚úÖ') ? 'text-green-400' : ''}>
              {log}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}