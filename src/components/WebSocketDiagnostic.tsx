// src/components/WebSocketDiagnostic.tsx
"use client";

import { useState } from "react";
import { useWebSocket } from "@/providers/WebSocketProvider";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { apiConfig } from "@/lib/api-config";
import { FEATURES } from "@/config/features";

export function WebSocketDiagnostic() {
  const { isConnected, connectionState, sendMessage, lastMessage, reconnect } = useWebSocket();
  const [testMessages, setTestMessages] = useState<any[]>([]);
  const [pingResponse, setPingResponse] = useState<string | null>(null);

  const sendPing = () => {
    const pingMessage = {
      action: "ping",
      timestamp: Date.now(),
      test: true
    };
    sendMessage(pingMessage);
    setPingResponse("Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...");
    
    // –°–±—Ä–æ—Å–∏–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
      if (pingResponse === "Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...") {
        setPingResponse("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ ping");
      }
    }, 5000);
  };

  const testConnection = async () => {
    setTestMessages(prev => [...prev, {
      type: 'info',
      message: 'üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...',
      timestamp: Date.now()
    }]);

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π HTTP API
      const chatResponse = await fetch('/api/whatsapp/chats');
      setTestMessages(prev => [...prev, {
        type: chatResponse.ok ? 'success' : 'error',
        message: `HTTP API: ${chatResponse.ok ? '‚úÖ' : '‚ùå'} Status: ${chatResponse.status}`,
        timestamp: Date.now()
      }]);

      // 2. –ü—Ä–æ–≤–µ—Ä–∏–º WebSocket —Ç–æ–∫–µ–Ω API
      const tokenResponse = await fetch('/api/whatsapp/websocket/token');
      let tokenData = null;
      try {
        tokenData = await tokenResponse.json();
      } catch (e) {
        tokenData = { error: 'Failed to parse response' };
      }
      
      setTestMessages(prev => [...prev, {
        type: tokenResponse.ok ? 'success' : 'warning',
        message: `WebSocket Token API: ${tokenResponse.ok ? '‚úÖ' : '‚ö†Ô∏è'} Status: ${tokenResponse.status}`,
        timestamp: Date.now(),
        data: tokenData
      }]);

      // 3. –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WebSocket URL
      const wsUrl = apiConfig.getWebSocketUrl();
      setTestMessages(prev => [...prev, {
        type: 'info',
        message: `WebSocket URL: ${wsUrl}`,
        timestamp: Date.now()
      }]);

      // 4. –ü–æ–ø—ã—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (tokenResponse.ok) {
        setTestMessages(prev => [...prev, {
          type: 'info',
          message: 'üîå –ü–æ–ø—ã—Ç–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...',
          timestamp: Date.now()
        }]);
        
        const testWs = new WebSocket(apiConfig.getWebSocketUrlWithToken());
        
        testWs.onopen = () => {
          setTestMessages(prev => [...prev, {
            type: 'success',
            message: '‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!',
            timestamp: Date.now()
          }]);
          testWs.close();
        };
        
        testWs.onerror = () => {
          setTestMessages(prev => [...prev, {
            type: 'error',
            message: '‚ùå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ',
            timestamp: Date.now()
          }]);
        };
        
        testWs.onclose = (event) => {
          setTestMessages(prev => [...prev, {
            type: 'info',
            message: `üîí WebSocket –∑–∞–∫—Ä—ã—Ç: ${event.code} ${event.reason || '(no reason)'}`,
            timestamp: Date.now()
          }]);
        };
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        setTimeout(() => {
          if (testWs.readyState === WebSocket.CONNECTING) {
            testWs.close();
            setTestMessages(prev => [...prev, {
              type: 'error',
              message: '‚è∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏',
              timestamp: Date.now()
            }]);
          }
        }, 5000);
      }
      
    } catch (error) {
      setTestMessages(prev => [...prev, {
        type: 'error',
        message: `‚ùå Diagnostic Error: ${error}`,
        timestamp: Date.now()
      }]);
    }
  };

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ ping
  if (lastMessage && lastMessage.type === 'pong' && pingResponse === "Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...") {
    setPingResponse("‚úÖ Pong –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    setTimeout(() => setPingResponse(null), 3000);
  }

  const getStatusColor = () => {
    switch (connectionState) {
      case 'connected': return 'bg-green-500';
      case 'connecting': return 'bg-yellow-500';
      case 'error': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  const getStatusText = () => {
    switch (connectionState) {
      case 'connected': return 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω';
      case 'connecting': return 'üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
      case 'error': return 'üî¥ –û—à–∏–±–∫–∞';
      default: return '‚ö´ –û—Ç–∫–ª—é—á–µ–Ω';
    }
  };

  return (
    <Card className="w-full max-w-2xl">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          WebSocket –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
          <Badge className={getStatusColor()}>
            {getStatusText()}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-gray-50 rounded">
          <div>
            <strong>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</strong><br />
            <div className="text-xs mt-1 space-y-1">
              <div>WebSocket: <Badge variant={FEATURES.WEBSOCKET_ENABLED ? "default" : "secondary"}>
                {FEATURES.WEBSOCKET_ENABLED ? "–í–∫–ª—é—á–µ–Ω" : "–û—Ç–∫–ª—é—á–µ–Ω"}
              </Badge></div>
              <div>HTTP Polling: {FEATURES.HTTP_POLLING_INTERVAL/1000}—Å</div>
              <div>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {FEATURES.SHOW_CONNECTION_STATUS ? "–î–∞" : "–ù–µ—Ç"}</div>
            </div>
          </div>
          <div>
            <strong>WebSocket URL:</strong><br />
            <code className="text-xs">{apiConfig.getWebSocketUrl()}</code>
            <br /><br />
            <strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</strong><br />
            <Badge variant={connectionState === 'connected' ? 'default' : 'secondary'}>
              {connectionState}
            </Badge>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex gap-2 flex-wrap">
          <Button 
            onClick={sendPing} 
            disabled={!isConnected}
            variant="outline"
          >
            üì° Ping Test
          </Button>
          
          <Button 
            onClick={testConnection} 
            variant="outline"
          >
            üîß API Test
          </Button>
          
          <Button 
            onClick={reconnect}
            variant="outline"
            disabled={!FEATURES.WEBSOCKET_ENABLED || connectionState === 'connecting'}
          >
            üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å
          </Button>
          
          {!FEATURES.WEBSOCKET_ENABLED && (
            <Button 
              onClick={() => {
                setTestMessages(prev => [...prev, {
                  type: 'info',
                  message: 'üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è WebSocket –∏–∑–º–µ–Ω–∏—Ç–µ WEBSOCKET_ENABLED –≤ src/config/features.ts',
                  timestamp: Date.now()
                }]);
              }}
              variant="outline"
            >
              üí° –ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å WebSocket?
            </Button>
          )}
        </div>

        {/* –û—Ç–≤–µ—Ç –Ω–∞ ping */}
        {pingResponse && (
          <div className="p-2 bg-blue-50 border border-blue-200 rounded">
            {pingResponse}
          </div>
        )}

        {/* –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
        {lastMessage && (
          <div className="p-4 bg-green-50 border border-green-200 rounded">
            <strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</strong>
            <pre className="text-xs mt-2 overflow-auto">
              {JSON.stringify(lastMessage, null, 2)}
            </pre>
          </div>
        )}

        {/* –õ–æ–≥ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */}
        {testMessages.length > 0 && (
          <div className="space-y-2">
            <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:</strong>
            <div className="max-h-64 overflow-y-auto space-y-2">
              {testMessages.slice(-10).map((msg, idx) => (
                <div key={idx} className={`text-xs p-2 border rounded ${
                  msg.type === 'success' ? 'bg-green-50 border-green-200' :
                  msg.type === 'error' ? 'bg-red-50 border-red-200' :
                  msg.type === 'warning' ? 'bg-yellow-50 border-yellow-200' :
                  'bg-blue-50 border-blue-200'
                }`}>
                  <div className="font-mono">
                    <span className="text-gray-500">
                      {new Date(msg.timestamp).toLocaleTimeString()}:
                    </span>
                    <span className="ml-2">{msg.message}</span>
                  </div>
                  {msg.data && (
                    <details className="mt-1">
                      <summary className="cursor-pointer text-gray-600">–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</summary>
                      <pre className="mt-1 text-xs overflow-auto bg-white p-1 rounded">
                        {JSON.stringify(msg.data, null, 2)}
                      </pre>
                    </details>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ */}
        {testMessages.length > 0 && (
          <Button 
            onClick={() => setTestMessages([])} 
            variant="outline" 
            size="sm"
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥
          </Button>
        )}

      </CardContent>
    </Card>
  );
}