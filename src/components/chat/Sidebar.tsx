// src/components/chat/Sidebar.tsx
"use client";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Search, Plus } from "lucide-react";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Chat } from "./types";
import { HeaderMenu } from "./menus";
import { useState } from "react";
import Link from "next/link";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const formatTime = (timestamp: string) => {
  const date = new Date(timestamp);
  const now = new Date();
  const diffMs = now.getTime() - date.getTime();
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

  if (diffDays === 0) {
    return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
  } else if (diffDays === 1) {
    return '–≤—á–µ—Ä–∞';
  } else if (diffDays < 7) {
    return date.toLocaleDateString('ru-RU', { weekday: 'short' });
  } else {
    return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const getLastMessageText = (lastMessage: any) => {
  if (!lastMessage) return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π";
  
  switch (lastMessage.type) {
    case 'text':
      return lastMessage.text || "–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ";
    case 'image':
      return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
    case 'document':
      return `üìÑ ${lastMessage.media?.name || '–î–æ–∫—É–º–µ–Ω—Ç'}`;
    case 'video':
      return "üé• –í–∏–¥–µ–æ";
    case 'audio':
      return "üéµ –ê—É–¥–∏–æ";
    default:
      return "–°–æ–æ–±—â–µ–Ω–∏–µ";
  }
};

export function Sidebar({
  query,
  setQuery,
  chats,
  selectedId,
  setSelectedId,
  compact,
  onCreateChat,
}: {
  query: string;
  setQuery: (v: string) => void;
  chats: Chat[];
  selectedId?: string;
  setSelectedId: (id: string) => void;
  compact?: boolean;
  onCreateChat: (phone: string) => Promise<void>;
}) {
  const [newChatPhone, setNewChatPhone] = useState("");
  const [isCreating, setIsCreating] = useState(false);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const handleCreate = async () => {
    const raw = newChatPhone.trim();
    if (!raw) return;
    setIsCreating(true);
    try {
      await onCreateChat(raw);
      setNewChatPhone("");
      setIsDialogOpen(false);
    } finally {
      setIsCreating(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleCreate();
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredChats = chats.filter(chat => 
    chat.name?.toLowerCase().includes(query.toLowerCase()) ||
    chat.lastMessage
  );

  return (
    <div className="flex h-full w-full flex-col bg-white dark:bg-gray-900">
      {/* üí¨ WhatsApp Style: –•–µ–¥–µ—Ä (–≤–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ—Å–∞) */}
      <div 
        // –í –≤–µ–±-–≤–µ—Ä—Å–∏–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω, –∞ –∞–∫—Ü–µ–Ω—Ç—ã –∑–µ–ª–µ–Ω—ã–µ.
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω (bg-gray-50) —Å –∑–µ–ª–µ–Ω—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫.
        className="flex items-center justify-between px-4 py-3 bg-gray-50 dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700"
      >
        <div className="flex items-center gap-3">
          {/* –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–µ–ª–∞–µ–º –±–æ–ª—å—à–µ */}
          <Avatar className="h-10 w-10">
            <AvatarFallback className="bg-green-500 text-white">–Ø</AvatarFallback>
            <AvatarImage src="/your-profile-pic.jpg" alt="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" />
          </Avatar>
          {/* –£–±–∏—Ä–∞–µ–º "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã, –∫–∞–∫ –≤ WhatsApp Web */}
        </div>
        <div className="flex items-center gap-1">
          {/* –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ */}
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              {/* –ó–µ–ª–µ–Ω—ã–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –∏–∫–æ–Ω–∫–∞—Ö –≤ —à–∞–ø–∫–µ */}
              <Button variant="ghost" size="icon" aria-label="–ù–æ–≤—ã–π —á–∞—Ç" className="text-gray-500 hover:text-green-600">
                <Plus className="h-5 w-5" />
              </Button>
            </DialogTrigger>
            <DialogContent>
              {/* –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –æ–Ω–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ */}
              <DialogHeader>
                <DialogTitle>–ù–æ–≤—ã–π —á–∞—Ç</DialogTitle>
              </DialogHeader>
              <div className="flex flex-col gap-3 py-2">
                <Input
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (77751101800)"
                  value={newChatPhone}
                  onChange={(e) => setNewChatPhone(e.target.value)}
                  onKeyDown={handleKeyPress}
                  autoFocus
                />
                <Button
                  // –ó–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞
                  className="bg-green-500 hover:bg-green-600"
                  onClick={handleCreate}
                  disabled={isCreating || !newChatPhone.trim()}
                >
                  {isCreating ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–ù–∞—á–∞—Ç—å —á–∞—Ç"}
                </Button>
              </div>
            </DialogContent>
          </Dialog>

          <HeaderMenu />
        </div>
      </div>
      
      {/* üí¨ WhatsApp Style: –ü–æ–∏—Å–∫ (—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π, —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π) */}
      <div className="p-2 border-r border-b border-gray-100 dark:border-gray-800 bg-white dark:bg-gray-900">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 opacity-60 text-gray-500" />
          <Input
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            placeholder="–ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤"
            // –°—Ç–∏–ª–∏–∑—É–µ–º Input –≤ —Å—Ç–∏–ª–µ WhatsApp: —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ, —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω, –Ω–µ—Ç —Ä–∞–º–∫–∏
            className="pl-9 rounded-lg bg-gray-100 dark:bg-gray-800 border-none focus-visible:ring-0"
          />
        </div>
      </div>
      {/* –£–±–∏—Ä–∞–µ–º <Separator />, —Ç–∞–∫ –∫–∞–∫ –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã */}

      {/* –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ */}
      {/* –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å chat-background, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–æ —Å—Ç–∏–ª—è–º–∏ */}
      <ScrollArea className="flex-1 bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700"> 
        <div className="flex flex-col">
          {filteredChats.length === 0 ? (
            <div className="text-center text-muted-foreground py-8">
              {query ? "–ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" : "–ù–µ—Ç —á–∞—Ç–æ–≤"}
            </div>
          ) : (
            filteredChats.map((chat) => {
              const chatId = chat.id || chat.chat_id;
              
              if (!chatId) {
                return null;
              }

              return (
                <Link 
                  key={chatId} 
                  href={`/${encodeURIComponent(chatId)}`}
                  className={[
                    "w-full block",
                    chatId === selectedId ? "bg-gray-100 dark:bg-gray-800" : "hover:bg-gray-50 dark:hover:bg-gray-800/70",
                  ].join(" ")}
                  onClick={() => {
                    setSelectedId(chatId);
                  }}
                >
                  <button
                    className="w-full flex items-center gap-3 py-2 px-4 transition-colors border-b border-gray-100 dark:border-gray-800"
                  >
                    {/* –ê–≤–∞—Ç–∞—Ä - –¥–µ–ª–∞–µ–º –±–æ–ª—å—à–µ */}
                    <Avatar className="h-12 w-12 flex-shrink-0">
                      {chat.avatarUrl ? (
                        <AvatarImage src={chat.avatarUrl} alt={chat.name} />
                      ) : (
                        <AvatarFallback>
                          {chat.avatarFallback || 
                            (typeof chat.name === 'string' ? chat.name.charAt(0) : '?')}
                        </AvatarFallback>
                      )}
                    </Avatar>
                    
                    <div className="min-w-0 flex-1 text-left flex flex-col justify-center h-full">
                      {/* –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ */}
                      <div className="flex items-baseline justify-between">
                        <div className="truncate font-semibold text-gray-900 dark:text-gray-100 text-base">
                          {chat.name || chatId.replace('@c.us', '')}
                        </div>
                        <div className="ml-auto text-xs text-muted-foreground">
                          {chat.lastMessage?.timestamp ? 
                            formatTime(chat.lastMessage.timestamp) : ''}
                        </div>
                      </div>
                      
                      {/* –ù–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞ */}
                      <div className="flex items-center justify-between pt-0.5">
                        <div 
                          className={`text-sm truncate flex-1 pr-2 ${chat.unread ? 'text-gray-900 dark:text-gray-200' : 'text-muted-foreground'}`}
                        >
                          {getLastMessageText(chat.lastMessage)}
                        </div>

                        {/* üí¨ WhatsApp Style: –ó–µ–ª–µ–Ω—ã–π –∑–Ω–∞—á–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */}
                        {chat.unread ? (
                          <Badge
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –±—ç–¥–∂–∞
                            className="rounded-full h-5 w-5 flex items-center justify-center text-[10px] bg-green-500 hover:bg-green-600 text-white p-0"
                          >
                            {chat.unread}
                          </Badge>
                        ) : null}
                      </div>
                    </div>
                  </button>
                </Link>
              );
            })
          )}
        </div>
      </ScrollArea>
    </div>
  );
}