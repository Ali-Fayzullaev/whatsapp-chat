// src/hooks/useAI.ts
import { useState, useEffect, useCallback } from 'react';
import type { AIResponse, ChatContext } from '@/lib/deepseek';
import type { Message } from '@/components/chat/types';

export interface AISettings {
  enabled: boolean;
  autoReplyDelay: number;
  maxResponseLength: number;
  temperature: number;
  confidence_threshold: number;
}

export function useAI() {
  // üîß AI –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [aiEnabled, setAiEnabled] = useState(true);
  const [isProcessing, setIsProcessing] = useState(false);
  const [settings, setSettings] = useState<AISettings>({
    enabled: true, // üîß –í–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    autoReplyDelay: 2000,
    maxResponseLength: 300,
    temperature: 0.7,
    confidence_threshold: 0.7,
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadAISettings();
  }, []);

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI
   */
  const loadAISettings = useCallback(async () => {
    try {
      const response = await fetch('/api/ai/deepseek');
      
      if (response.ok) {
        const data = await response.json();
        setAiEnabled(data.enabled);
        setSettings(prev => ({ ...prev, ...data.settings }));
        console.log('ü§ñ AI settings loaded:', data);
      } else {
        console.log('ü§ñ AI API not available, using default settings (AI enabled)');
        // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º AI –≤–∫–ª—é—á–µ–Ω–Ω—ã–º
        setAiEnabled(true);
      }
    } catch (error) {
      console.log('ü§ñ AI API error, using default settings (AI enabled):', error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ API –æ—Å—Ç–∞–≤–ª—è–µ–º AI –≤–∫–ª—é—á–µ–Ω–Ω—ã–º
      setAiEnabled(true);
    }
  }, []);

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI
   */
  const updateAISettings = useCallback(async (newSettings: Partial<AISettings>) => {
    try {
      const response = await fetch('/api/ai/deepseek', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          enabled: newSettings.enabled,
          settings: newSettings,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        setAiEnabled(data.enabled);
        setSettings(prev => ({ ...prev, ...newSettings }));
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Failed to update AI settings:', error);
      return false;
    }
  }, []);

  /**
   * –ü–æ–ª—É—á–∏—Ç—å AI –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  const getAIResponse = useCallback(async (
    message: string,
    chatId: string,
    messages: Message[] = []
  ): Promise<AIResponse | null> => {
    
    if (!aiEnabled || isProcessing) {
      return null;
    }

    setIsProcessing(true);

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
      const chatContext: Partial<ChatContext> = {
        messages: messages.slice(-10).map(msg => ({
          text: msg.text,
          author: msg.author,
          timestamp: msg.createdAt,
        })),
        chatId,
      };

      const response = await fetch('/api/ai/deepseek', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message,
          chatId,
          context: chatContext,
        }),
      });

      if (!response.ok) {
        throw new Error(`AI API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success) {
        console.log('ü§ñ AI response received:', data.aiResponse);
        return data.aiResponse;
      }

      return null;

    } catch (error) {
      console.error('ü§ñ AI request failed:', error);
      return null;
    } finally {
      setIsProcessing(false);
    }
  }, [aiEnabled, isProcessing]);

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
   */
  const processAutoReply = useCallback(async (
    message: string,
    chatId: string,
    messages: Message[],
    onReply: (text: string) => Promise<void>
  ): Promise<boolean> => {
    
    if (!aiEnabled) return false;

    console.log('ü§ñ Processing auto-reply for:', message);

    const aiResponse = await getAIResponse(message, chatId, messages);
    
    if (!aiResponse?.shouldReply) {
      console.log('ü§ñ AI decided not to reply');
      return false;
    }

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º (–∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞)
    await new Promise(resolve => setTimeout(resolve, settings.autoReplyDelay));

    try {
      await onReply(aiResponse.response);
      console.log('ü§ñ Auto-reply sent:', aiResponse.response);
      return true;
    } catch (error) {
      console.error('ü§ñ Failed to send auto-reply:', error);
      return false;
    }
  }, [aiEnabled, getAIResponse, settings.autoReplyDelay]);

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ AI
   */
  const toggleAI = useCallback(() => {
    updateAISettings({ enabled: !aiEnabled });
  }, [aiEnabled, updateAISettings]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    aiEnabled,
    isProcessing,
    settings,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    getAIResponse,
    processAutoReply,
    toggleAI,
    updateAISettings,
    loadAISettings,
  };
}