// src/hooks/useMessageSync.ts - –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
"use client";
import { useEffect, useRef, useCallback, useState } from 'react';
import type { Message } from '@/components/chat/types';

interface ReplyCache {
  [messageId: string]: {
    replyTo: {
      id: string;
      author: "me" | "them";
      text: string;
      media?: {
        type: "image" | "video" | "document" | "audio";
        name?: string;
      };
    };
    timestamp: number;
  };
}

interface MessageSyncOptions {
  chatId: string | null;
  messages: Message[];
  isWebSocketConnected: boolean;
  onMessagesUpdate: (messages: Message[]) => void;
  onReloadMessages: () => Promise<void>;
}

export function useMessageSync({
  chatId,
  messages,
  isWebSocketConnected,
  onMessagesUpdate,
  onReloadMessages
}: MessageSyncOptions) {
  // –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const replyCache = useRef<ReplyCache>({});
  const lastWebSocketActivity = useRef<number>(Date.now());
  const pollingInterval = useRef<NodeJS.Timeout | null>(null);
  const lastMessageCount = useRef<number>(0);
  const onMessagesUpdateRef = useRef(onMessagesUpdate);
  const onReloadMessagesRef = useRef(onReloadMessages);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º refs –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
  useEffect(() => {
    onMessagesUpdateRef.current = onMessagesUpdate;
  }, [onMessagesUpdate]);
  
  useEffect(() => {
    onReloadMessagesRef.current = onReloadMessages;
  }, [onReloadMessages]);
  
  const [syncStatus, setSyncStatus] = useState<'websocket' | 'polling' | 'offline'>('websocket');
  const [isPolling, setIsPolling] = useState(false);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–≤–µ—Ç–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
  const cacheReply = useCallback((messageId: string, replyTo: Message['replyTo']) => {
    if (replyTo && chatId) {
      const cacheKey = `${chatId}-${messageId}`;
      replyCache.current[cacheKey] = {
        replyTo,
        timestamp: Date.now()
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      try {
        localStorage.setItem(
          `reply-cache-${chatId}`, 
          JSON.stringify(replyCache.current)
        );
      } catch (error) {
        console.warn('Failed to save reply cache to localStorage:', error);
      }
    }
  }, [chatId]);

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ localStorage
  const loadReplyCache = useCallback(() => {
    if (!chatId) return;
    
    try {
      const cached = localStorage.getItem(`reply-cache-${chatId}`);
      if (cached) {
        replyCache.current = JSON.parse(cached);
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        const now = Date.now();
        const cleaned: ReplyCache = {};
        
        Object.entries(replyCache.current).forEach(([key, value]) => {
          if (now - value.timestamp < 24 * 60 * 60 * 1000) {
            cleaned[key] = value;
          }
        });
        
        replyCache.current = cleaned;
      }
    } catch (error) {
      console.warn('Failed to load reply cache from localStorage:', error);
      replyCache.current = {};
    }
  }, [chatId]);

  // –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ—Ç–≤–µ—Ç–∞—Ö –∏–∑ –∫—ç—à–∞
  const enrichMessagesWithReplies = useCallback((msgs: Message[]): Message[] => {
    if (!chatId) return msgs;
    
    return msgs.map(message => {
      // –ï—Å–ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –µ—Å—Ç—å replyTo, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (message.replyTo) return message;
      
      // –ò—â–µ–º –≤ –∫—ç—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ –ø–æ —Ä–∞–∑–Ω—ã–º –∫–ª—é—á–∞–º
      const possibleKeys = [
        `${chatId}-${message.id}`, // –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
        `${chatId}-${message.id_message}`, // —Ä–µ–∞–ª—å–Ω—ã–π ID –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      ].filter(Boolean);
      
      for (const cacheKey of possibleKeys) {
        const cachedReply = replyCache.current[cacheKey];
        if (cachedReply) {
          console.log(`üîç –ù–∞–π–¥–µ–Ω –∫—ç—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${message.id} –ø–æ –∫–ª—é—á—É ${cacheKey}:`, cachedReply.replyTo);
          return {
            ...message,
            replyTo: cachedReply.replyTo
          };
        }
      }
      
      return message;
    });
  }, [chatId]);

  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ WebSocket
  const checkWebSocketActivity = useCallback(() => {
    const now = Date.now();
    const timeSinceLastActivity = now - lastWebSocketActivity.current;
    const messageCountChanged = messages.length !== lastMessageCount.current;
    
    // –ï—Å–ª–∏ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥ –∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    if (isWebSocketConnected && timeSinceLastActivity > 5000 && messages.length > 0 && !messageCountChanged) {
      if (!isPolling) {
        console.log('üîÑ WebSocket –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –≤–∫–ª—é—á–∞–µ–º polling');
        startPolling();
      }
    } else if (messageCountChanged) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      lastWebSocketActivity.current = now;
      lastMessageCount.current = messages.length;
      
      if (isPolling) {
        console.log('‚úÖ WebSocket –∞–∫—Ç–∏–≤–µ–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º polling');
        stopPolling();
      }
    }
  }, [isWebSocketConnected, messages.length, isPolling]);

  // –ó–∞–ø—É—Å–∫ polling
  const startPolling = useCallback(() => {
    if (pollingInterval.current || !chatId) return;
    
    setIsPolling(true);
    setSyncStatus('polling');
    
    pollingInterval.current = setInterval(async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (document.hidden) return;
      
      try {
        console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π');
        await onReloadMessagesRef.current();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ:', error);
      }
    }, 3000); // –ö–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
  }, [chatId, onReloadMessages]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling
  const stopPolling = useCallback(() => {
    if (pollingInterval.current) {
      clearInterval(pollingInterval.current);
      pollingInterval.current = null;
    }
    
    setIsPolling(false);
    setSyncStatus(isWebSocketConnected ? 'websocket' : 'offline');
  }, [isWebSocketConnected]);

  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const deduplicateMessages = useCallback((msgs: Message[]): Message[] => {
    const seen = new Set<string>();
    const deduplicated: Message[] = [];
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    const sorted = [...msgs].sort((a, b) => (a.createdAt ?? 0) - (b.createdAt ?? 0));
    
    for (const message of sorted) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º id_message –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, fallback –Ω–∞ id
      const identifier = message.id_message || message.id;
      
      if (!seen.has(identifier)) {
        seen.add(identifier);
        deduplicated.push(message);
      }
    }
    
    return deduplicated;
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞
  useEffect(() => {
    loadReplyCache();
  }, [chatId, loadReplyCache]);

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ WebSocket
  useEffect(() => {
    const checkInterval = setInterval(checkWebSocketActivity, 2000);
    return () => clearInterval(checkInterval);
  }, [checkWebSocketActivity]);

  // –û—á–∏—Å—Ç–∫–∞ polling –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      stopPolling();
    };
  }, [stopPolling]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ WebSocket
  useEffect(() => {
    if (isWebSocketConnected) {
      lastWebSocketActivity.current = Date.now();
      setSyncStatus('websocket');
    } else {
      setSyncStatus('offline');
      stopPolling();
    }
  }, [isWebSocketConnected, stopPolling]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  useEffect(() => {
    if (messages.length === 0) return;
    
    console.log('üîÑ useMessageSync: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º', messages.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
    
    // –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –∏ –æ–±–æ–≥–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const deduplicated = deduplicateMessages(messages);
    console.log('üîÑ useMessageSync: –ü–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:', deduplicated.length);
    
    const enriched = enrichMessagesWithReplies(deduplicated);
    console.log('üîÑ useMessageSync: –ü–æ—Å–ª–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è:', enriched.length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–µ —Ç–æ–ª—å–∫–æ JSON)
    const hasChanges = enriched.some((msg, index) => {
      const original = messages[index];
      return !original || 
             msg.id !== original.id ||
             !!msg.replyTo !== !!original.replyTo ||
             (msg.replyTo && original.replyTo && msg.replyTo.id !== original.replyTo.id);
    });
    
    if (hasChanges || enriched.length !== messages.length) {
      console.log('üîÑ useMessageSync: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');
      onMessagesUpdateRef.current(enriched);
    }
  }, [messages, deduplicateMessages, enrichMessagesWithReplies]);

  return {
    cacheReply,
    syncStatus,
    isPolling,
    startPolling,
    stopPolling,
    enrichMessagesWithReplies,
    deduplicateMessages
  };
}