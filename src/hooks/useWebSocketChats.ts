// src/hooks/useWebSocketChats.ts
"use client";
import { useEffect, useCallback, useRef } from 'react';
import { useWebSocket } from '@/providers/WebSocketProvider';
import { formatMessageTime } from '@/utils/dateFormat';
import type { Chat, Message } from '@/components/chat/types';
interface WebSocketChatEvent {
  type: 'chat_updated' | 'new_message' | 'message_updated' | 'chat_deleted' | 'new_chat';
  data: {
    chatId?: string;
    chat?: Chat;
    message?: Message;
    [key: string]: any;
  };
}
interface UseWebSocketChatsProps {
  onChatUpdated?: (chat: Chat) => void;
  onNewMessage?: (chatId: string, message: Message) => void;
  onMessageUpdated?: (chatId: string, message: Message) => void;
  onChatDeleted?: (chatId: string) => void;
  onNewChat?: (chat: Chat) => void;
  onChatsUpdate?: (chats: Chat[]) => void;
}
export function useWebSocketChats({
  onChatUpdated,
  onNewMessage,
  onMessageUpdated,
  onChatDeleted,
  onNewChat,
  onChatsUpdate
}: UseWebSocketChatsProps) {
  const { isConnected, onMessage, offMessage } = useWebSocket();
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ handleWebSocketMessage
  const handleWebSocketMessageRef = useRef<((data: any) => void) | null>(null);
  const handleWebSocketMessage = useCallback((data: any) => {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
      const eventType = data?.type;
      const chatId = data?.chat_id;
      const messageItem = data?.data?.item; // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      switch (eventType) {
        case 'ws.ready':
          break;
        case 'message.created':
        case 'message.updated':
          // –ï—Å–ª–∏ –µ—Å—Ç—å messageItem, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (chatId && messageItem && onNewMessage) {
            console.log("üì¶ –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –≤:", {
              reply_to: messageItem.reply_to,
              replyTo: messageItem.replyTo, 
              quoted: messageItem.quoted,
              contextInfo: messageItem.contextInfo,
              quotedMessage: messageItem.quotedMessage
            });
            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
            let replyTo: Message['replyTo'] = undefined;
            if (messageItem.reply_to || messageItem.replyTo || messageItem.quoted || 
                messageItem.contextInfo?.quotedMessage || messageItem.quotedMessage) {
              const quotedData = messageItem.quoted || messageItem.contextInfo?.quotedMessage || messageItem.quotedMessage;
              const replyId = messageItem.reply_to || messageItem.replyTo || quotedData?.id || quotedData?.id_message;
              if (replyId) {
                replyTo = {
                  id: replyId,
                  author: quotedData?.direction === 'out' || quotedData?.author === 'me' ? 'me' : 'them',
                  text: quotedData?.text || quotedData?.body || quotedData?.message || '–°–æ–æ–±—â–µ–Ω–∏–µ',
                  media: quotedData?.media ? {
                    type: quotedData.media.type || 'document',
                    name: quotedData.media.name
                  } : undefined
                };
              }
            }
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º messageItem –≤ —Ñ–æ—Ä–º–∞—Ç Message
            const message: Message = {
              id: messageItem.id_message || Date.now().toString(),
              chatId: chatId,
              author: messageItem.direction === 'out' ? 'me' : 'them',
              text: messageItem.text || '',
              time: formatMessageTime(messageItem.timestamp),
              createdAt: new Date(messageItem.timestamp).getTime(),
              status: messageItem.status === 'read' ? 'read' : 
                     messageItem.status === 'delivered' ? 'delivered' : 
                     messageItem.status === 'sent' ? 'sent' : undefined,
              isRead: messageItem.seen,
              direction: messageItem.direction,
              timestamp: messageItem.timestamp,
              id_message: messageItem.id_message,
              media: messageItem.media,
              sender: messageItem.sender,
              replyTo
            };
            onNewMessage(chatId, message);
          }
          // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–±—ç–∫
          if (onChatUpdated && chatId && messageItem) {
            const chatUpdate = {
              id: chatId,
              chatId: chatId,
              isGroup: data.is_group,
              lastMessage: messageItem,
              // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –∏–∑ data, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            };
            onChatUpdated(chatUpdate as any);
          }
          break;
        case 'message.deleted':
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
          break;
        case 'chat.deleted':
          if (chatId && onChatDeleted) {
            onChatDeleted(chatId);
          }
          break;
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–±—ã—Ç–∏–π
        case 'chat_updated':
          if (data.data?.chat && onChatUpdated) {
            onChatUpdated(data.data.chat);
          }
          break;
        case 'new_message':
          if (data.data?.chatId && data.data?.message && onNewMessage) {
            onNewMessage(data.data.chatId, data.data.message);
          }
          break;
        case 'chats_update':
          if (data.data?.chats && onChatsUpdate) {
            onChatsUpdate(data.data.chats);
          }
          break;
        default:
          // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
          const lastMessage = data?.last_message; // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
          const fallbackMessageItem = messageItem || lastMessage; // –ü—Ä–æ–±—É–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
          if (chatId && fallbackMessageItem && onNewMessage) {
            const message: Message = {
              id: fallbackMessageItem.id_message || Date.now().toString(),
              chatId: chatId,
              author: fallbackMessageItem.direction === 'out' ? 'me' : 'them',
              text: fallbackMessageItem.text || '',
              time: formatMessageTime(fallbackMessageItem.timestamp),
              createdAt: new Date(fallbackMessageItem.timestamp).getTime(),
              status: fallbackMessageItem.status === 'read' ? 'read' : 
                     fallbackMessageItem.status === 'delivered' ? 'delivered' : 
                     fallbackMessageItem.status === 'sent' ? 'sent' : undefined,
              isRead: fallbackMessageItem.seen,
              direction: fallbackMessageItem.direction,
              timestamp: fallbackMessageItem.timestamp,
              id_message: fallbackMessageItem.id_message,
              media: fallbackMessageItem.media,
              sender: fallbackMessageItem.sender
            };
            onNewMessage(chatId, message);
          }
          break;
      }
    } catch (error) {
      // –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤ production
    }
  }, [onChatUpdated, onNewMessage, onMessageUpdated, onChatDeleted, onNewChat, onChatsUpdate]);

  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  if (!handleWebSocketMessageRef.current) {
    handleWebSocketMessageRef.current = handleWebSocketMessage;
  } else {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    handleWebSocketMessageRef.current = handleWebSocketMessage;
  }

  useEffect(() => {
    const stableHandler = handleWebSocketMessageRef.current;
    if (isConnected && stableHandler) {
      onMessage(stableHandler);
      return () => {
        if (stableHandler) {
          offMessage(stableHandler);
        }
      };
    }
  }, [isConnected, onMessage, offMessage]);
  return {
    isConnected,
    isRealTime: isConnected
  };
}
