// src/lib/auth-api.ts
import { apiConfig } from './api-config';
import type { LoginRequest, LoginResponse, User } from '@/types/auth';

class AuthAPI {
  private static instance: AuthAPI;
  private baseUrl = 'https://socket.eldor.kz';

  private constructor() {}

  static getInstance(): AuthAPI {
    if (!AuthAPI.instance) {
      AuthAPI.instance = new AuthAPI();
    }
    return AuthAPI.instance;
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async login(credentials: LoginRequest): Promise<LoginResponse> {
    console.log('üîë Logging in user:', credentials.username);
    
    try {
      const response = await fetch(`${this.baseUrl}/api/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(credentials),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.detail || errorData.message || `HTTP ${response.status}`);
      }

      const data: LoginResponse = await response.json();
      console.log('‚úÖ Login successful, token type:', data.token_type);
      
      return data;
    } catch (error) {
      console.error('‚ùå Login failed:', error);
      throw error instanceof Error ? error : new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  async logout(): Promise<void> {
    console.log('üö™ Logging out user...');
    
    try {
      const response = await fetch(`${this.baseUrl}/api/auth/logout`, {
        method: 'POST',
        headers: apiConfig.getHeaders(),
      });

      if (!response.ok) {
        console.warn('‚ö†Ô∏è Logout request failed, but proceeding with local logout');
      } else {
        console.log('‚úÖ Successfully logged out from server');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Logout request error, but proceeding with local logout:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  async getCurrentUser(): Promise<User> {
    console.log('üë§ Fetching current user info...');
    
    try {
      const response = await fetch(`${this.baseUrl}/api/auth/me`, {
        method: 'GET',
        headers: apiConfig.getHeaders(),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.detail || errorData.message || `HTTP ${response.status}`);
      }

      const user: User = await response.json();
      console.log('‚úÖ Current user loaded:', user.username);
      
      return user;
    } catch (error) {
      console.error('‚ùå Failed to fetch user info:', error);
      throw error instanceof Error ? error : new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
   */
  async validateToken(): Promise<boolean> {
    try {
      await this.getCurrentUser();
      return true;
    } catch (error) {
      console.log('üîí Token validation failed:', error);
      return false;
    }
  }
}

export const authAPI = AuthAPI.getInstance();