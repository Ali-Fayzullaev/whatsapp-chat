const DEEPSEEK_API_KEY = 'sk-2e7bb79b255a4f279b281cc7138e5c19';
const DEEPSEEK_API_URL = 'https://api.deepseek.com/chat/completions';

// src/lib/deepseek.ts
export interface Message {
  text: string;
  author: 'me' | 'them';
  timestamp: number;
}

export interface ChatContext {
  messages: Message[];
  customerName?: string;
  chatId: string;
}

export interface AIResponse {
  intent: 'question' | 'complaint' | 'order' | 'support' | 'greeting' | 'other';
  response?: string;
  confidence: number;
  shouldReply: boolean;
  urgency: 'low' | 'medium' | 'high';
  tags?: string[];
  suggestedActions?: string[];
}

export interface DeepSeekSettings {
  autoReplyDelay: number;
  maxResponseLength: number;
  temperature: number;
  confidence_threshold: number;
}

class DeepSeekAI {
  private enabled: boolean = true;
  private apiKey: string;
  private baseUrl: string = 'https://api.deepseek.com/v1';
  private settings: DeepSeekSettings = {
    autoReplyDelay: 2000,
    maxResponseLength: 300,
    temperature: 0.7,
    confidence_threshold: 0.7,
  };

  constructor() {
    // üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º hardcoded –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.apiKey = DEEPSEEK_API_KEY || process.env.DEEPSEEK_API_KEY || '';
    
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è DeepSeek API key not found');
      this.enabled = false;
    } else {
      console.log('ü§ñ DeepSeek AI initialized with API key:', this.apiKey.substring(0, 10) + '...');
      this.enabled = true; // üîß –í–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á
    }
  }

  isEnabled(): boolean {
    return this.enabled && !!this.apiKey;
  }

  setEnabled(enabled: boolean): void {
    this.enabled = enabled;
  }

  updateSettings(newSettings: Partial<DeepSeekSettings>): void {
    this.settings = { ...this.settings, ...newSettings };
  }

  getSettings(): DeepSeekSettings {
    return { ...this.settings };
  }

  private async callDeepSeekAPI(messages: any[]): Promise<any> {
    if (!this.apiKey) {
      throw new Error('DeepSeek API key is not configured');
    }

    const response = await fetch(`${this.baseUrl}/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.apiKey}`,
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages,
        temperature: this.settings.temperature,
        max_tokens: this.settings.maxResponseLength,
        stream: false,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`DeepSeek API error: ${response.status} ${errorText}`);
    }

    return response.json();
  }

  private analyzeIntent(message: string): AIResponse['intent'] {
    const text = message.toLowerCase();
    
    if (text.includes('?') || text.includes('–∫–∞–∫') || text.includes('–≥–¥–µ') || text.includes('–∫–æ–≥–¥–∞') || text.includes('—á—Ç–æ')) {
      return 'question';
    }
    
    if (text.includes('–∂–∞–ª–æ–±') || text.includes('–ø—Ä–æ–±–ª–µ–º') || text.includes('–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç') || text.includes('–ø–ª–æ—Ö–æ')) {
      return 'complaint';
    }
    
    if (text.includes('–∑–∞–∫–∞–∑') || text.includes('–∫—É–ø–∏—Ç—å') || text.includes('—Ü–µ–Ω–∞') || text.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) {
      return 'order';
    }
    
    if (text.includes('–ø–æ–º–æ—â—å') || text.includes('–ø–æ–¥–¥–µ—Ä–∂–∫') || text.includes('–ø–æ–º–æ–≥–∏—Ç–µ')) {
      return 'support';
    }
    
    if (text.includes('–ø—Ä–∏–≤–µ—Ç') || text.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π') || text.includes('–¥–æ–±—Ä—ã–π –¥–µ–Ω—å') || text.includes('–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å')) {
      return 'greeting';
    }
    
    return 'other';
  }

  private calculateUrgency(message: string, intent: AIResponse['intent']): AIResponse['urgency'] {
    const text = message.toLowerCase();
    
    const urgentWords = ['—Å—Ä–æ—á–Ω–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '–∞–≤–∞—Ä–∏–π–Ω–æ', '—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ'];
    const highPriorityWords = ['–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ—à–∏–±–∫–∞', '—Å–ª–æ–º–∞–Ω'];
    
    if (urgentWords.some(word => text.includes(word))) {
      return 'high';
    }
    
    if (intent === 'complaint' || highPriorityWords.some(word => text.includes(word))) {
      return 'high';
    }
    
    if (intent === 'support' || intent === 'question') {
      return 'medium';
    }
    
    return 'low';
  }

  private shouldAutoReply(intent: AIResponse['intent'], urgency: AIResponse['urgency']): boolean {
    console.log('ü§ñ DeepSeek: Evaluating shouldAutoReply for intent:', intent, 'urgency:', urgency);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if (intent === 'greeting') {
      console.log('ü§ñ DeepSeek: ‚úÖ Will reply - greeting detected');
      return true;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (urgency === 'high') {
      console.log('ü§ñ DeepSeek: ‚úÖ Will reply - high urgency');
      return true;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–∞–∫–∞–∑–∞—Ö
    if (intent === 'order') {
      console.log('ü§ñ DeepSeek: ‚úÖ Will reply - order intent');
      return true;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    if (intent === 'question') {
      console.log('ü§ñ DeepSeek: ‚úÖ Will reply - question intent');
      return true;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if (intent === 'support') {
      console.log('ü§ñ DeepSeek: ‚úÖ Will reply - support intent');
      return true;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∂–∞–ª–æ–±—ã
    if (intent === 'complaint') {
      console.log('ü§ñ DeepSeek: ‚úÖ Will reply - complaint intent');
      return true;
    }
    
    // üÜï –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –æ—Ç–≤–µ—á–∞–µ–º –¥–∞–∂–µ –Ω–∞ "other" —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log('ü§ñ DeepSeek: ‚úÖ Will reply - default behavior for testing');
    return true;
    
    // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    // console.log('ü§ñ DeepSeek: ‚ùå Will not reply - no matching conditions');
    // return false;
  }

  private generateSystemPrompt(context: ChatContext): string {
    return `–¢—ã - –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WhatsApp —á–∞—Ç–∞. 

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –ß–∞—Ç ID: ${context.chatId}
- –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: ${context.customerName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${context.messages.length}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
2. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
3. –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
4. –ë—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º, –ø–æ–ª–µ–∑–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º

–ü—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
- –í—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–º–æ—â–∏

–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è):
${context.messages.slice(-5).map(msg => 
  `${msg.author === 'me' ? '–û–ø–µ—Ä–∞—Ç–æ—Ä' : '–ö–ª–∏–µ–Ω—Ç'}: ${msg.text}`
).join('\n')}`;
  }

  async generateResponse(message: string, context: ChatContext): Promise<AIResponse> {
    console.log('ü§ñ DeepSeek: Analyzing message:', message.substring(0, 100));

    if (!this.isEnabled()) {
      console.log('ü§ñ DeepSeek: AI disabled, returning minimal response');
      return {
        intent: 'other',
        confidence: 0,
        shouldReply: false,
        urgency: 'low',
      };
    }

    try {
      const intent = this.analyzeIntent(message);
      const urgency = this.calculateUrgency(message, intent);
      const shouldReply = this.shouldAutoReply(intent, urgency);

      console.log('ü§ñ DeepSeek: Intent analysis:', { intent, urgency, shouldReply });

      let response: string | undefined;
      let confidence = 0.5;

      if (shouldReply) {
        try {
          const systemPrompt = this.generateSystemPrompt(context);
          
          const messages = [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: message }
          ];

          console.log('ü§ñ DeepSeek: Calling API...');
          const apiResponse = await this.callDeepSeekAPI(messages);
          
          if (apiResponse.choices && apiResponse.choices[0]) {
            response = apiResponse.choices[0].message?.content?.trim();
            confidence = 0.8; // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
            console.log('ü§ñ DeepSeek: API response generated successfully');
          }
        } catch (error) {
          console.error('ü§ñ DeepSeek API error:', error);
          
          // Fallback –∫ –ø—Ä–æ—Å—Ç—ã–º —à–∞–±–ª–æ–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º
          response = this.generateFallbackResponse(intent, context.customerName);
          confidence = 0.3;
        }
      }

      const result: AIResponse = {
        intent,
        response,
        confidence,
        shouldReply,
        urgency,
        tags: this.generateTags(message, intent),
        suggestedActions: this.generateSuggestedActions(intent, urgency),
      };

      console.log('ü§ñ DeepSeek: Analysis complete:', {
        intent: result.intent,
        confidence: result.confidence,
        shouldReply: result.shouldReply,
        urgency: result.urgency,
        hasResponse: !!result.response
      });

      return result;

    } catch (error) {
      console.error('ü§ñ DeepSeek: Unexpected error:', error);
      
      return {
        intent: 'other',
        confidence: 0,
        shouldReply: false,
        urgency: 'low',
        tags: ['error'],
      };
    }
  }

  private generateFallbackResponse(intent: AIResponse['intent'], customerName?: string): string {
    const name = customerName ? customerName : '';
    
    switch (intent) {
      case 'greeting':
        return `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ${name ? `, ${name}` : ''}! –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`;
      
      case 'question':
        return `${name ? `${name}, ` : ''}—è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. –°–µ–π—á–∞—Å —É—Ç–æ—á–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É –∫–æ–ª–ª–µ–≥.`;
      
      case 'complaint':
        return `${name ? `${name}, ` : ''}–ø—Ä–∏–Ω–æ—à—É –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –ü–µ—Ä–µ–¥–∞–º –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è.`;
      
      case 'order':
        return `${name ? `${name}, ` : ''}—Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É —Å –∑–∞–∫–∞–∑–æ–º. –°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.`;
      
      case 'support':
        return `${name ? `${name}, ` : ''}–∫–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é.`;
      
      default:
        return `${name ? `${name}, ` : ''}—Å–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?`;
    }
  }

  private generateTags(message: string, intent: AIResponse['intent']): string[] {
    const tags: string[] = [intent];
    const text = message.toLowerCase();
    
    if (text.includes('—Ü–µ–Ω–∞') || text.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) tags.push('pricing');
    if (text.includes('–¥–æ—Å—Ç–∞–≤–∫–∞')) tags.push('delivery');
    if (text.includes('–≤–æ–∑–≤—Ä–∞—Ç')) tags.push('refund');
    if (text.includes('–≥–∞—Ä–∞–Ω—Ç–∏—è')) tags.push('warranty');
    if (text.includes('—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞')) tags.push('technical');
    
    return tags;
  }

  private generateSuggestedActions(intent: AIResponse['intent'], urgency: AIResponse['urgency']): string[] {
    const actions: string[] = [];
    
    if (urgency === 'high') {
      actions.push('notify_manager');
    }
    
    switch (intent) {
      case 'complaint':
        actions.push('escalate_to_support', 'log_complaint');
        break;
      case 'order':
        actions.push('check_inventory', 'prepare_quote');
        break;
      case 'support':
        actions.push('gather_details', 'check_knowledge_base');
        break;
    }
    
    return actions;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const deepSeekAI = new DeepSeekAI();