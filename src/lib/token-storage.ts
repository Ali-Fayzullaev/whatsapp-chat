// src/lib/token-storage.ts

interface TokenStorageOptions {
  useHttpOnlyCookies?: boolean;
  cookieName?: string;
  localStorageKey?: string;
}

class TokenStorage {
  private options: Required<TokenStorageOptions>;

  constructor(options: TokenStorageOptions = {}) {
    this.options = {
      useHttpOnlyCookies: false,
      cookieName: 'auth_token',
      localStorageKey: 'auth_token',
      ...options,
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
   */
  setToken(token: string): void {
    if (typeof window === 'undefined') return;

    try {
      // 1. –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è JS –¥–æ—Å—Ç—É–ø–∞
      localStorage.setItem(this.options.localStorageKey, token);

      // 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cookie
      this.setCookie(this.options.cookieName, token, {
        maxAge: 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π
        secure: window.location.protocol === 'https:',
        sameSite: 'strict',
        path: '/',
      });

      console.log('üîí Token saved to localStorage and cookie');
    } catch (error) {
      console.error('‚ùå Failed to save token:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
   */
  getToken(): string | null {
    if (typeof window === 'undefined') return null;

    try {
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: localStorage > cookie
      const localStorageToken = localStorage.getItem(this.options.localStorageKey);
      if (localStorageToken) {
        return localStorageToken;
      }

      // Fallback: —á–∏—Ç–∞–µ–º –∏–∑ cookie
      const cookieToken = this.getCookie(this.options.cookieName);
      if (cookieToken) {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ localStorage
        localStorage.setItem(this.options.localStorageKey, cookieToken);
        return cookieToken;
      }

      return null;
    } catch (error) {
      console.error('‚ùå Failed to get token:', error);
      return null;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω
   */
  removeToken(): void {
    if (typeof window === 'undefined') return;

    try {
      // –£–¥–∞–ª—è–µ–º –∏–∑ localStorage
      localStorage.removeItem(this.options.localStorageKey);

      // –£–¥–∞–ª—è–µ–º cookie
      this.setCookie(this.options.cookieName, '', {
        maxAge: -1,
        path: '/',
      });

      console.log('üóëÔ∏è Token removed from localStorage and cookie');
    } catch (error) {
      console.error('‚ùå Failed to remove token:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
   */
  hasToken(): boolean {
    return !!this.getToken();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ (–±–µ–∑ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏)
   */
  getTokenInfo(): { hasToken: boolean; storage: string[] } {
    const localStorage = typeof window !== 'undefined' 
      ? !!window.localStorage.getItem(this.options.localStorageKey)
      : false;
    
    const cookie = typeof window !== 'undefined' 
      ? !!this.getCookie(this.options.cookieName)
      : false;

    const storage: string[] = [];
    if (localStorage) storage.push('localStorage');
    if (cookie) storage.push('cookie');

    return {
      hasToken: localStorage || cookie,
      storage,
    };
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookies
  private setCookie(name: string, value: string, options: {
    maxAge?: number;
    secure?: boolean;
    sameSite?: 'strict' | 'lax' | 'none';
    path?: string;
  } = {}): void {
    let cookieString = `${name}=${value}`;

    if (options.maxAge !== undefined) {
      cookieString += `; Max-Age=${options.maxAge}`;
    }

    if (options.secure) {
      cookieString += '; Secure';
    }

    if (options.sameSite) {
      cookieString += `; SameSite=${options.sameSite}`;
    }

    if (options.path) {
      cookieString += `; Path=${options.path}`;
    }

    document.cookie = cookieString;
  }

  private getCookie(name: string): string | null {
    if (typeof document === 'undefined') return null;

    const nameEQ = name + "=";
    const cookies = document.cookie.split(';');

    for (let cookie of cookies) {
      cookie = cookie.trim();
      if (cookie.indexOf(nameEQ) === 0) {
        return cookie.substring(nameEQ.length);
      }
    }

    return null;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const tokenStorage = new TokenStorage({
  useHttpOnlyCookies: false, // –ü–æ–∫–∞ false, –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ
  cookieName: 'whatsapp_auth_token',
  localStorageKey: 'auth_token',
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
export const TokenUtils = {
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
   */
  maskToken(token: string | null): string {
    if (!token) return '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    if (token.length < 10) return '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
    
    return `${token.slice(0, 4)}‚Ä¢‚Ä¢‚Ä¢‚Ä¢${token.slice(-4)}`;
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞ (–±–∞–∑–æ–≤–∞—è)
   */
  isTokenExpired(token: string): boolean {
    try {
      const parts = token.split('.');
      if (parts.length !== 3) return true;

      const payload = JSON.parse(atob(parts[1]));
      const exp = payload.exp;

      if (!exp) return false; // –¢–æ–∫–µ–Ω –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è

      return Date.now() >= exp * 1000;
    } catch (error) {
      console.warn('Cannot parse token:', error);
      return true;
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
   */
  getTokenPayload(token: string): any | null {
    try {
      const parts = token.split('.');
      if (parts.length !== 3) return null;

      return JSON.parse(atob(parts[1]));
    } catch (error) {
      console.warn('Cannot parse token payload:', error);
      return null;
    }
  },
};