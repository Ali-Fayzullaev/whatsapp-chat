// src/lib/token-storage.ts

interface TokenStorageOptions {
  useHttpOnlyCookies?: boolean;
  cookieName?: string;
  localStorageKey?: string;
}

class TokenStorage {
  private options: Required<TokenStorageOptions>;

  constructor(options: TokenStorageOptions = {}) {
    this.options = {
      useHttpOnlyCookies: false,
      cookieName: 'auth_token',
      localStorageKey: 'auth_token',
      ...options,
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
   */
  setToken(token: string): void {
    if (typeof window === 'undefined') return;

    try {
      // 1. –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è JS –¥–æ—Å—Ç—É–ø–∞
      localStorage.setItem(this.options.localStorageKey, token);

      // 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cookie
      this.setCookie(this.options.cookieName, token, {
        maxAge: 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π
        secure: window.location.protocol === 'https:',
        sameSite: 'strict',
        path: '/',
      });

      console.log('üîí Token saved to localStorage and cookie');
    } catch (error) {
      console.error('‚ùå Failed to save token:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
   */
  getToken(): string | null {
    if (typeof window === 'undefined') return null;

    try {
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: localStorage > cookie
      const localStorageToken = localStorage.getItem(this.options.localStorageKey);
      if (localStorageToken) {
        return localStorageToken;
      }

      // Fallback: —á–∏—Ç–∞–µ–º –∏–∑ cookie
      const cookieToken = this.getCookie(this.options.cookieName);
      if (cookieToken) {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ localStorage
        localStorage.setItem(this.options.localStorageKey, cookieToken);
        return cookieToken;
      }

      return null;
    } catch (error) {
      console.error('‚ùå Failed to get token:', error);
      return null;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω
   */
  removeToken(): void {
    if (typeof window === 'undefined') return;

    try {
      // –£–¥–∞–ª—è–µ–º –∏–∑ localStorage
      localStorage.removeItem(this.options.localStorageKey);

      // –£–¥–∞–ª—è–µ–º cookie
      this.setCookie(this.options.cookieName, '', {
        maxAge: -1,
        path: '/',
      });

      console.log('üóëÔ∏è Token removed from localStorage and cookie');
    } catch (error) {
      console.error('‚ùå Failed to remove token:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
   */
  hasToken(): boolean {
    return !!this.getToken();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ (–±–µ–∑ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏)
   */
  getTokenInfo(): { hasToken: boolean; storage: string[] } {
    const localStorage = typeof window !== 'undefined' 
      ? !!window.localStorage.getItem(this.options.localStorageKey)
      : false;
    
    const cookie = typeof window !== 'undefined' 
      ? !!this.getCookie(this.options.cookieName)
      : false;

    const storage: string[] = [];
    if (localStorage) storage.push('localStorage');
    if (cookie) storage.push('cookie');

    return {
      hasToken: localStorage || cookie,
      storage,
    };
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookies
  private setCookie(name: string, value: string, options: {
    maxAge?: number;
    secure?: boolean;
    sameSite?: 'strict' | 'lax' | 'none';
    path?: string;
  } = {}): void {
    let cookieString = `${name}=${value}`;

    if (options.maxAge !== undefined) {
      cookieString += `; Max-Age=${options.maxAge}`;
    }

    if (options.secure) {
      cookieString += '; Secure';
    }

    if (options.sameSite) {
      cookieString += `; SameSite=${options.sameSite}`;
    }

    if (options.path) {
      cookieString += `; Path=${options.path}`;
    }

    document.cookie = cookieString;
  }

  private getCookie(name: string): string | null {
    if (typeof document === 'undefined') return null;

    const nameEQ = name + "=";
    const cookies = document.cookie.split(';');

    for (let cookie of cookies) {
      cookie = cookie.trim();
      if (cookie.indexOf(nameEQ) === 0) {
        return cookie.substring(nameEQ.length);
      }
    }

    return null;
  }
}

// –°—Ç–∞—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–æ–≤—ã–º –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
export const TokenUtils = {
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
   */
  maskToken(token: string | null): string {
    if (!token) return '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    if (token.length < 10) return '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
    
    return `${token.slice(0, 4)}‚Ä¢‚Ä¢‚Ä¢‚Ä¢${token.slice(-4)}`;
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞ (–±–∞–∑–æ–≤–∞—è)
   */
  isTokenExpired(token: string): boolean {
    try {
      const parts = token.split('.');
      if (parts.length !== 3) return true;

      const payload = JSON.parse(atob(parts[1]));
      const exp = payload.exp;

      if (!exp) return false; // –¢–æ–∫–µ–Ω –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è

      return Date.now() >= exp * 1000;
    } catch (error) {
      console.warn('Cannot parse token:', error);
      return true;
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
   */
  getTokenPayload(token: string): any | null {
    try {
      const parts = token.split('.');
      if (parts.length !== 3) return null;

      return JSON.parse(atob(parts[1]));
    } catch (error) {
      console.warn('Cannot parse token payload:', error);
      return null;
    }
  },
};

/**
 * üîí –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–†–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
 */
export const SecurityEnhancements = {
  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  setupTokenCleanup() {
    if (typeof window !== 'undefined') {
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      window.addEventListener('beforeunload', () => {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        // tokenStorage.removeToken();
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      setInterval(() => {
        const token = tokenStorage.getToken();
        if (token && TokenUtils.isTokenExpired(token)) {
          console.log('üîí Token expired, removing...');
          tokenStorage.removeToken();
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
          window.location.href = '/auth/login';
        }
      }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
   */
  validateTokenIntegrity(token: string): boolean {
    try {
      const parts = token.split('.');
      if (parts.length !== 3) return false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
      JSON.parse(atob(parts[1]));
      return true;
    } catch {
      return false;
    }
  },

  /**
   * –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ localStorage (–ø—Ä–æ—Å—Ç–æ–µ –æ–±—Ñ—É—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ)
   */
  encodeToken(token: string): string {
    // –ü—Ä–æ—Å—Ç–æ–µ base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
    return btoa(unescape(encodeURIComponent(token)));
  },

  decodeToken(encodedToken: string): string {
    try {
      return decodeURIComponent(escape(atob(encodedToken)));
    } catch {
      return encodedToken; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
    }
  },
};

/**
 * üîí –£–õ–£–ß–®–ï–ù–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï –¢–û–ö–ï–ù–û–í –° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨–Æ
 */
class SecureTokenStorage extends TokenStorage {
  private isEncryptionEnabled = false;

  constructor(options: TokenStorageOptions & { enableEncryption?: boolean } = {}) {
    super(options);
    this.isEncryptionEnabled = options.enableEncryption || false;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  setToken(token: string): void {
    if (typeof window === 'undefined') return;

    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
      if (!SecurityEnhancements.validateTokenIntegrity(token)) {
        console.error('‚ùå Invalid token format');
        return;
      }

      const tokenToStore = this.isEncryptionEnabled 
        ? SecurityEnhancements.encodeToken(token) 
        : token;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
      super.setToken(tokenToStore);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      SecurityEnhancements.setupTokenCleanup();

    } catch (error) {
      console.error('‚ùå Failed to save secure token:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
   */
  getToken(): string | null {
    const storedToken = super.getToken();
    
    if (!storedToken) return null;

    try {
      const token = this.isEncryptionEnabled 
        ? SecurityEnhancements.decodeToken(storedToken)
        : storedToken;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
      if (TokenUtils.isTokenExpired(token)) {
        console.log('üîí Token expired, removing...');
        this.removeToken();
        return null;
      }

      return token;
    } catch (error) {
      console.error('‚ùå Failed to decode token:', error);
      this.removeToken(); // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
      return null;
    }
  }
}

// üîπ –≠–ö–°–ü–û–†–¢ –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í
// –û–±—ã—á–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (—Ç–µ–∫—É—â–∏–π)
export const tokenStorage = new TokenStorage();

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
export const secureTokenStorage = new SecureTokenStorage({ 
  enableEncryption: false  // –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
});

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
export { TokenStorage, SecureTokenStorage };