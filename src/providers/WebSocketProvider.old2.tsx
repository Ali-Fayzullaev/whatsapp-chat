// src/providers/WebSocketProvider.tsx
"use client";
import { createContext, useContext, useEffect, useState, useCallback, useRef } from "react";
import { FEATURES } from "@/config/features";

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–∞–∫ —É –¥—Ä—É–≥–∞
const WS_RECONNECT_DELAY = 5000;

interface WebSocketContextType {
  isConnected: boolean;
  lastMessage: any;
  connectionState: 'connecting' | 'connected' | 'disconnected' | 'error';
  sendMessage: (data: any) => void;
  onMessage: (handler: (data: any) => void) => void;
  offMessage: (handler: (data: any) => void) => void;
  reconnect: () => void;
}

const WebSocketContext = createContext<WebSocketContextType>({
  isConnected: false,
  lastMessage: null,
  connectionState: 'disconnected',
  sendMessage: () => {},
  onMessage: () => {},
  offMessage: () => {},
  reconnect: () => {},
});

export function WebSocketProvider({ children }: { children: React.ReactNode }) {
  const [isConnected, setIsConnected] = useState(false);
  const [connectionState, setConnectionState] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('disconnected');
  const [lastMessage, setLastMessage] = useState<any>(null);
  const [messageHandlers, setMessageHandlers] = useState<((data: any) => void)[]>([]);

  // Refs –¥–ª—è WebSocket –∫–∞–∫ —É –¥—Ä—É–≥–∞
  const wsConnectionRef = useRef<WebSocket | null>(null);
  const wsReconnectTimerRef = useRef<NodeJS.Timeout | null>(null);
  const shouldReconnectWsRef = useRef(true);

  const onMessage = useCallback((handler: (data: any) => void) => {
    setMessageHandlers(prev => [...prev, handler]);
  }, []);

  const offMessage = useCallback((handler: (data: any) => void) => {
    setMessageHandlers(prev => prev.filter(h => h !== handler));
  }, []);

  // –§—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ —É –¥—Ä—É–≥–∞
  const clearWsReconnectTimer = useCallback(() => {
    if (wsReconnectTimerRef.current) {
      clearTimeout(wsReconnectTimerRef.current);
      wsReconnectTimerRef.current = null;
    }
  }, []);

  const scheduleWsReconnect = useCallback(() => {
    if (!shouldReconnectWsRef.current) return;
    if (wsReconnectTimerRef.current) return;
    
    wsReconnectTimerRef.current = setTimeout(() => {
      wsReconnectTimerRef.current = null;
      connectWebSocket();
    }, WS_RECONNECT_DELAY);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ —É –¥—Ä—É–≥–∞
  const handleWsEnvelope = useCallback((raw: any) => {
    if (!raw) return;
    let payload;
    try {
      payload = typeof raw === "string" ? JSON.parse(raw) : raw;
    } catch (err) {
      console.error("Failed to parse WS payload", err);
      return;
    }
    if (!payload || typeof payload !== "object") return;

    console.log("ÔøΩ WebSocket message received:", payload);
    setLastMessage(payload);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    messageHandlers.forEach(handler => {
      try {
        handler(payload);
      } catch (error) {
        console.error('‚ùå Error in WebSocket message handler:', error);
      }
    });

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    const type = payload.type;
    const chatId = payload.chat_id || payload.chatId || null;
    const data = payload.data || {};

    switch (type) {
      case "ws.ready":
        console.debug("WS ready", payload.meta || {});
        break;
      case "message.created":
      case "message.updated":
      case "message.deleted":
      case "chat.deleted":
        console.debug(`WebSocket event: ${type}`, { chatId, data });
        break;
      default:
        console.debug("Unknown WebSocket event:", type);
        break;
    }
  }, [messageHandlers]);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ —É –¥—Ä—É–≥–∞
  const connectWebSocket = useCallback(() => {
    clearWsReconnectTimer();
    
    const token = apiConfig.getAccessToken();
    if (!token) {
      console.error("‚ùå No authentication token found");
      setConnectionState('error');
      return;
    }

    const params = new URLSearchParams({ token });
    const url = `${WS_BASE}/api/ws?${params.toString()}`;
    
    console.log("üîó WebSocket connecting to:", url.replace(/token=[^&]+/, 'token=***'));
    setConnectionState('connecting');

    if (wsConnectionRef.current) {
      try {
        wsConnectionRef.current.onclose = null;
        wsConnectionRef.current.onerror = null;
        wsConnectionRef.current.close();
      } catch (err) {
        console.warn("Failed to close previous WS", err);
      }
    }

    let socket;
    try {
      socket = new WebSocket(url);
    } catch (err) {
      console.error("WebSocket init error", err);
      setConnectionState('error');
      scheduleWsReconnect();
      return;
    }

    wsConnectionRef.current = socket;

    socket.onopen = () => {
      console.info("‚úÖ WebSocket connected", url.replace(/token=[^&]+/, 'token=***'));
      setIsConnected(true);
      setConnectionState('connected');
    };

    socket.onmessage = (event) => {
      try {
        handleWsEnvelope(event.data);
      } catch (err) {
        console.error("WS message handling failed", err);
      }
    };

    socket.onerror = (err) => {
      console.error("‚ùå WebSocket error", err);
      setIsConnected(false);
      setConnectionState('error');
      try {
        socket.close();
      } catch (e) {
        console.warn("WebSocket close error", e);
      }
    };

    socket.onclose = (event) => {
      console.log(`üîö WebSocket closed: ${event.code} - ${event.reason || 'no reason'}`);
      wsConnectionRef.current = null;
      setIsConnected(false);
      setConnectionState('disconnected');
      
      if (shouldReconnectWsRef.current) {
        scheduleWsReconnect();
      }
    };
  }, [clearWsReconnectTimer, scheduleWsReconnect, handleWsEnvelope]);

  const shutdownRealtime = useCallback(() => {
    shouldReconnectWsRef.current = false;
    clearWsReconnectTimer();
    
    const socket = wsConnectionRef.current;
    wsConnectionRef.current = null;
    if (socket) {
      try {
        socket.onclose = null;
        socket.onerror = null;
        socket.close();
      } catch (err) {
        console.warn("WS close during shutdown failed", err);
      }
    }
    setIsConnected(false);
    setConnectionState('disconnected');
  }, [clearWsReconnectTimer]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const reconnect = useCallback(() => {
    if (!FEATURES.WEBSOCKET_ENABLED) {
      console.log("üì° WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
      return;
    }
    
    console.log("üîÑ Manual WebSocket reconnection triggered");
    if (socket) {
      socket.close();
    }
    // initWebSocket –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ useEffect
  }, [socket]);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ WebSocket –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (!FEATURES.WEBSOCKET_ENABLED) {
      console.log("üì° WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞–µ–º –≤ HTTP-—Ä–µ–∂–∏–º–µ");
      setIsConnected(false);
      setConnectionState('disconnected');
      return;
    }

    const ws = initWebSocket();
    
    return () => {
      if (ws) {
        ws.then(websocket => {
          if (websocket) {
            websocket.close();
          }
        });
      }
    };
  }, [initWebSocket]);

  const sendMessage = useCallback((data: any) => {
    if (socket && isConnected) {
      try {
        const message = JSON.stringify(data);
        console.log("üì§ Sending WebSocket message:", data);
        socket.send(message);
      } catch (error) {
        console.error("‚ùå Failed to send WebSocket message:", error);
      }
    } else {
      console.warn('‚ö†Ô∏è WebSocket not connected, cannot send message. Connection status:', {
        hasSocket: !!socket,
        isConnected
      });
    }
  }, [socket, isConnected]);

  return (
    <WebSocketContext.Provider
      value={{ 
        isConnected, 
        lastMessage, 
        connectionState,
        sendMessage,
        onMessage,
        offMessage,
        reconnect
      }}
    >
      {children}
    </WebSocketContext.Provider>
  );
}

export const useWebSocket = () => useContext(WebSocketContext);