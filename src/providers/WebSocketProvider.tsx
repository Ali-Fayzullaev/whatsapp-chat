// src/providers/WebSocketProvider.tsx
"use client";
import { createContext, useContext, useEffect, useState, useCallback, useRef } from "react";
import { FEATURES } from "@/config/features";

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è WebSocket
const WS_RECONNECT_DELAY = 5000;
const WS_BASE_URL = "wss://socket.eldor.kz/api/ws";

interface WebSocketContextType {
  isConnected: boolean;
  lastMessage: any;
  connectionState: 'connecting' | 'connected' | 'disconnected' | 'error';
  sendMessage: (data: any) => void;
  onMessage: (handler: (data: any) => void) => void;
  offMessage: (handler: (data: any) => void) => void;
  reconnect: () => void;
  startConnection: () => void;
}

const WebSocketContext = createContext<WebSocketContextType>({
  isConnected: false,
  lastMessage: null,
  connectionState: 'disconnected',
  sendMessage: () => {},
  onMessage: () => {},
  offMessage: () => {},
  reconnect: () => {},
  startConnection: () => {},
});

export function WebSocketProvider({ children }: { children: React.ReactNode }) {
  const [isConnected, setIsConnected] = useState(false);
  const [connectionState, setConnectionState] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('disconnected');
  const [lastMessage, setLastMessage] = useState<any>(null);

  // Refs –¥–ª—è WebSocket –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  const wsConnectionRef = useRef<WebSocket | null>(null);
  const wsReconnectTimerRef = useRef<NodeJS.Timeout | null>(null);
  const shouldReconnectWsRef = useRef(true);
  const messageHandlersRef = useRef<Set<(data: any) => void>>(new Set());

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
  const onMessage = useCallback((handler: (data: any) => void) => {
    messageHandlersRef.current.add(handler);
  }, []);

  const offMessage = useCallback((handler: (data: any) => void) => {
    messageHandlersRef.current.delete(handler);
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const clearWsReconnectTimer = useCallback(() => {
    if (wsReconnectTimerRef.current) {
      clearTimeout(wsReconnectTimerRef.current);
      wsReconnectTimerRef.current = null;
    }
  }, []);

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const scheduleWsReconnect = useCallback(() => {
    if (!shouldReconnectWsRef.current) return;
    if (wsReconnectTimerRef.current) return;
    
    console.log('üîÑ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket —á–µ—Ä–µ–∑', WS_RECONNECT_DELAY, 'ms');
    wsReconnectTimerRef.current = setTimeout(() => {
      wsReconnectTimerRef.current = null;
      connectWebSocket();
    }, WS_RECONNECT_DELAY);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
  const handleWsEnvelope = useCallback((raw: string) => {
    if (!raw) return;
    
    let payload;
    try {
      payload = typeof raw === "string" ? JSON.parse(raw) : raw;
    } catch (err) {
      console.error("‚ùå Failed to parse WS payload", err);
      return;
    }
    
    if (!payload || typeof payload !== "object") return;

    console.log("üì® WebSocket message received:", payload);
    setLastMessage(payload);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    messageHandlersRef.current.forEach((handler: (data: any) => void) => {
      try {
        handler(payload);
      } catch (error) {
        console.error('‚ùå Error in WebSocket message handler:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    const type = payload.type;
    
    switch (type) {
      case "ws.ready":
        console.log("‚úÖ WebSocket –≥–æ—Ç–æ–≤:", payload.meta || {});
        break;
      case "message.created":
        console.log("üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", payload);
        break;
      case "message.updated":
        console.log("‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", payload);
        break;
      case "message.deleted":
        console.log("üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:", payload);
        break;
      case "chat.deleted":
        console.log("üóëÔ∏è –ß–∞—Ç —É–¥–∞–ª–µ–Ω:", payload);
        break;
      default:
        console.log("üîî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ WebSocket:", type, payload);
        break;
    }
  }, []);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
  const connectWebSocket = useCallback(() => {
    if (!FEATURES.WEBSOCKET_ENABLED) {
      console.log('‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      setConnectionState('disconnected');
      return;
    }

    clearWsReconnectTimer();
    
    const token = localStorage.getItem('auth_token');
    if (!token) {
      console.log("‚ÑπÔ∏è –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - WebSocket –æ–∂–∏–¥–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
      setConnectionState('disconnected');
      return;
    }

    const params = new URLSearchParams({ token });
    const url = `${WS_BASE_URL}?${params.toString()}`;

    console.log("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket:", url.replace(/token=[^&]+/, 'token=***'));
    console.log(`üìã WebSocket —Å—Ç–∞—Ç—É—Å: WEBSOCKET_ENABLED=${FEATURES.WEBSOCKET_ENABLED}, URL=${WS_BASE_URL}`);
    setConnectionState('connecting');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (wsConnectionRef.current) {
      try {
        wsConnectionRef.current.onclose = null;
        wsConnectionRef.current.onerror = null;
        wsConnectionRef.current.close();
      } catch (err) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ WebSocket:", err);
      }
    }

    let socket: WebSocket;
    try {
      socket = new WebSocket(url);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:", err);
      setConnectionState('error');
      scheduleWsReconnect();
      return;
    }

    wsConnectionRef.current = socket;

    socket.onopen = () => {
      console.log("‚úÖ WebSocket —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
      console.log(`üîå WebSocket —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: readyState=${socket.readyState}`);
      setIsConnected(true);
      setConnectionState('connected');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ping —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        try {
          if (socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({ type: 'ping', timestamp: Date.now() }));
            console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
          }
        } catch (e) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping:", e);
        }
      }, 1000);
    };

    socket.onmessage = (event) => {
      try {
        handleWsEnvelope(event.data);
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket:", err);
      }
    };

    socket.onerror = (err) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket:", err);
      setConnectionState('error');
      try {
        socket.close();
      } catch (e) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket –ø—Ä–∏ –æ—à–∏–±–∫–µ:", e);
      }
    };

    socket.onclose = (event) => {
      console.log(`üîö WebSocket –∑–∞–∫—Ä—ã—Ç: –∫–æ–¥ ${event.code}, –ø—Ä–∏—á–∏–Ω–∞: ${event.reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`üîå WebSocket —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: readyState=${socket.readyState}, wasClean=${event.wasClean}`);
      setIsConnected(false);
      setConnectionState('disconnected');
      wsConnectionRef.current = null;
      
      if (shouldReconnectWsRef.current) {
        console.log("üîÑ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket...");
        scheduleWsReconnect();
      } else {
        console.log("‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω–æ");
      }
    };
  }, [clearWsReconnectTimer, scheduleWsReconnect, handleWsEnvelope]);

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const sendMessage = useCallback((data: any) => {
    if (!wsConnectionRef.current || wsConnectionRef.current.readyState !== WebSocket.OPEN) {
      console.error("‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", data);
      return false;
    }

    try {
      const message = typeof data === 'string' ? data : JSON.stringify(data);
      wsConnectionRef.current.send(message);
      console.log("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", data);
      return true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      return false;
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const reconnect = useCallback(() => {
    console.log("üîÑ –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket");
    shouldReconnectWsRef.current = true;
    connectWebSocket();
  }, [connectWebSocket]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  useEffect(() => {
    if (!FEATURES.WEBSOCKET_ENABLED) {
      console.log("‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
      return;
    }

    console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket Provider");
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const checkTokenAndConnect = () => {
      const token = localStorage.getItem('auth_token');
      if (token && shouldReconnectWsRef.current) {
        console.log("üîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º WebSocket");
        connectWebSocket();
      } else if (!token) {
        console.log("‚è≥ –û–∂–∏–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        setConnectionState('disconnected');
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    checkTokenAndConnect();

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è)
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === 'auth_token') {
        console.log("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        checkTokenAndConnect();
      }
    };

    window.addEventListener('storage', handleStorageChange);
    shouldReconnectWsRef.current = true;

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      shouldReconnectWsRef.current = false;
      clearWsReconnectTimer();
      window.removeEventListener('storage', handleStorageChange);
      
      if (wsConnectionRef.current) {
        wsConnectionRef.current.onclose = null;
        wsConnectionRef.current.onerror = null;
        wsConnectionRef.current.close();
      }
    };
  }, [connectWebSocket, clearWsReconnectTimer]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const startConnection = useCallback(() => {
    const token = localStorage.getItem('auth_token');
    if (token) {
      console.log("üöÄ –ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
      shouldReconnectWsRef.current = true;
      connectWebSocket();
    }
  }, [connectWebSocket]);

  const value: WebSocketContextType = {
    isConnected,
    lastMessage,
    connectionState,
    sendMessage,
    onMessage,
    offMessage,
    reconnect,
    startConnection,
  };

  return (
    <WebSocketContext.Provider value={value}>
      {children}
    </WebSocketContext.Provider>
  );
}

export const useWebSocket = () => {
  const context = useContext(WebSocketContext);
  if (!context) {
    throw new Error('useWebSocket must be used within a WebSocketProvider');
  }
  return context;
};