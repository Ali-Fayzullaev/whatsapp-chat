// src/providers/WebSocketProvider.tsx
"use client";
import { createContext, useContext, useEffect, useState, useCallback } from "react";
import ReconnectingWebSocket from "reconnecting-websocket";
import { apiConfig } from "@/lib/api-config";
import { FEATURES } from "@/config/features";

interface WebSocketContextType {
  isConnected: boolean;
  lastMessage: any;
  connectionState: 'connecting' | 'connected' | 'disconnected' | 'error';
  sendMessage: (data: any) => void;
  onMessage: (handler: (data: any) => void) => void;
  offMessage: (handler: (data: any) => void) => void;
  reconnect: () => void;
}

const WebSocketContext = createContext<WebSocketContextType>({
  isConnected: false,
  lastMessage: null,
  connectionState: 'disconnected',
  sendMessage: () => {},
  onMessage: () => {},
  offMessage: () => {},
  reconnect: () => {},
});

export function WebSocketProvider({ children }: { children: React.ReactNode }) {
  const [socket, setSocket] = useState<ReconnectingWebSocket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [connectionState, setConnectionState] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('disconnected');
  const [lastMessage, setLastMessage] = useState<any>(null);
  const [messageHandlers, setMessageHandlers] = useState<((data: any) => void)[]>([]);

  const onMessage = useCallback((handler: (data: any) => void) => {
    setMessageHandlers(prev => [...prev, handler]);
  }, []);

  const offMessage = useCallback((handler: (data: any) => void) => {
    setMessageHandlers(prev => prev.filter(h => h !== handler));
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const initWebSocket = useCallback(async () => {
    try {
      console.log("=== INITIALIZING WEBSOCKET ===");
      setConnectionState('connecting');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä WebSocket
      let wsUrl: string;
      let tokenAvailable = false;
      
      try {
        console.log("üîç Checking WebSocket token availability...");
        const tokenRes = await fetch('/api/whatsapp/websocket/token');
        
        if (tokenRes.ok) {
          const tokenData = await tokenRes.json();
          wsUrl = tokenData.url || apiConfig.getWebSocketUrl();
          if (tokenData.token) {
            wsUrl += `?token=${tokenData.token}`;
            tokenAvailable = true;
          } else {
            wsUrl += `?token=${apiConfig.getAccessToken()}`;
          }
          console.log("‚úÖ WebSocket token obtained successfully");
        } else {
          console.warn(`‚ö†Ô∏è WebSocket token API not available (${tokenRes.status}), trying direct connection`);
          wsUrl = apiConfig.getWebSocketUrlWithToken();
        }
      } catch (error) {
        console.warn("‚ö†Ô∏è Failed to get WebSocket token, using direct connection:", error);
        wsUrl = apiConfig.getWebSocketUrlWithToken();
      }

      console.log("üîó WebSocket URL:", wsUrl.replace(/token=[^&]+/, 'token=***'));
      
      // –ü–æ–ø—ã—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      console.log("üß™ Testing WebSocket connection...");

      const ws = new ReconnectingWebSocket(wsUrl, [], {
        connectionTimeout: 8000,
        maxRetries: 3, // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        maxReconnectionDelay: 60000,
        minReconnectionDelay: 2000,
        debug: false, // –û—Ç–∫–ª—é—á–∞–µ–º debug —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —à—É–º –≤ –∫–æ–Ω—Å–æ–ª–∏
      });

      // –¢–∞–π–º–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–º–µ—Ä—Ç–≤–æ–≥–æ" –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      let connectionAttemptTimer: NodeJS.Timeout | null = null;

      ws.onopen = () => {
        console.log("‚úÖ WebSocket connected successfully");
        setIsConnected(true);
        setConnectionState('connected');
        if (connectionAttemptTimer) {
          clearTimeout(connectionAttemptTimer);
          connectionAttemptTimer = null;
        }
      };

      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log("üì® WebSocket message received:", data);
          setLastMessage(data);
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
          messageHandlers.forEach(handler => {
            try {
              handler(data);
            } catch (error) {
              console.error('‚ùå Error in WebSocket message handler:', error);
            }
          });
        } catch (error) {
          console.error("‚ùå WebSocket message parse error:", error, "Raw data:", event.data);
        }
      };

      ws.onclose = (event) => {
        console.log(`‚ùå WebSocket disconnected: ${event.code} ${event.reason || '(no reason)'}`);
        setIsConnected(false);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        if (event.code === 1006) {
          console.log("üîç Connection lost (abnormal closure)");
          setConnectionState('error');
        } else if (event.code === 1000) {
          console.log("‚úã Normal closure");
          setConnectionState('disconnected');
        } else {
          console.log(`‚ö†Ô∏è Unexpected close code: ${event.code}`);
          setConnectionState('error');
        }
      };

      ws.onerror = (error) => {
        console.error("‚ùå WebSocket error:", error);
        setIsConnected(false);
        setConnectionState('error');
      };

      // –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–ª–≥–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      connectionAttemptTimer = setTimeout(() => {
        if (!isConnected && connectionState === 'connecting') {
          console.log("‚è∞ WebSocket connection timeout - server may not support WebSocket");
          setConnectionState('error');
          ws.close();
        }
      }, 15000);

      setSocket(ws);

      return ws;
    } catch (error) {
      console.error("‚ùå Failed to initialize WebSocket:", error);
      setIsConnected(false);
      setConnectionState('error');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      console.log("üîÑ WebSocket unavailable - application will work in HTTP-only mode");
      return null;
    }
  }, [messageHandlers]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const reconnect = useCallback(() => {
    if (!FEATURES.WEBSOCKET_ENABLED) {
      console.log("üì° WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
      return;
    }
    
    console.log("üîÑ Manual WebSocket reconnection triggered");
    if (socket) {
      socket.close();
    }
    // initWebSocket –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ useEffect
  }, [socket]);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ WebSocket –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (!FEATURES.WEBSOCKET_ENABLED) {
      console.log("üì° WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞–µ–º –≤ HTTP-—Ä–µ–∂–∏–º–µ");
      setIsConnected(false);
      setConnectionState('disconnected');
      return;
    }

    const ws = initWebSocket();
    
    return () => {
      if (ws) {
        ws.then(websocket => {
          if (websocket) {
            websocket.close();
          }
        });
      }
    };
  }, [initWebSocket]);

  const sendMessage = useCallback((data: any) => {
    if (socket && isConnected) {
      try {
        const message = JSON.stringify(data);
        console.log("üì§ Sending WebSocket message:", data);
        socket.send(message);
      } catch (error) {
        console.error("‚ùå Failed to send WebSocket message:", error);
      }
    } else {
      console.warn('‚ö†Ô∏è WebSocket not connected, cannot send message. Connection status:', {
        hasSocket: !!socket,
        isConnected
      });
    }
  }, [socket, isConnected]);

  return (
    <WebSocketContext.Provider
      value={{ 
        isConnected, 
        lastMessage, 
        connectionState,
        sendMessage,
        onMessage,
        offMessage,
        reconnect
      }}
    >
      {children}
    </WebSocketContext.Provider>
  );
}

export const useWebSocket = () => useContext(WebSocketContext);